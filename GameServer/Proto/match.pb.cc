// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match.proto

#include "match.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Request::Request(
    ::_pbi::ConstantInitialized) {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_CONSTEXPR ServerInfo::ServerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roomlist_)*/nullptr
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerInfoDefaultTypeInternal() {}
  union {
    ServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
PROTOBUF_CONSTEXPR RegistServerRequest::RegistServerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serverinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistServerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistServerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistServerRequestDefaultTypeInternal() {}
  union {
    RegistServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistServerRequestDefaultTypeInternal _RegistServerRequest_default_instance_;
PROTOBUF_CONSTEXPR RegistServerResponse::RegistServerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_.serverid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistServerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistServerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistServerResponseDefaultTypeInternal() {}
  union {
    RegistServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistServerResponseDefaultTypeInternal _RegistServerResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveServerRequest::RemoveServerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveServerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveServerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveServerRequestDefaultTypeInternal() {}
  union {
    RemoveServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveServerRequestDefaultTypeInternal _RemoveServerRequest_default_instance_;
PROTOBUF_CONSTEXPR ServerInfoList::ServerInfoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serverinfos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerInfoListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerInfoListDefaultTypeInternal() {}
  union {
    ServerInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerInfoListDefaultTypeInternal _ServerInfoList_default_instance_;
PROTOBUF_CONSTEXPR PUser::PUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aidx_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PUserDefaultTypeInternal() {}
  union {
    PUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PUserDefaultTypeInternal _PUser_default_instance_;
PROTOBUF_CONSTEXPR RoomInfo::RoomInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostaidx_)*/uint64_t{0u}
  , /*decltype(_impl_.mapid_)*/0u
  , /*decltype(_impl_.minmembercount_)*/0u
  , /*decltype(_impl_.maxmembercount_)*/0u
  , /*decltype(_impl_.nowmembercount_)*/0u
  , /*decltype(_impl_.roomid_)*/uint64_t{0u}
  , /*decltype(_impl_.locked_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomInfoDefaultTypeInternal() {}
  union {
    RoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
PROTOBUF_CONSTEXPR GetRoomListRequest::GetRoomListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRoomListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRoomListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRoomListRequestDefaultTypeInternal() {}
  union {
    GetRoomListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRoomListRequestDefaultTypeInternal _GetRoomListRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateRoomRequest::CreateRoomRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostaidx_)*/uint64_t{0u}
  , /*decltype(_impl_.mapid_)*/0u
  , /*decltype(_impl_.minmembercount_)*/0u
  , /*decltype(_impl_.maxmembercount_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRoomRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRoomRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRoomRequestDefaultTypeInternal() {}
  union {
    CreateRoomRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRoomRequestDefaultTypeInternal _CreateRoomRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateRoomResponse::CreateRoomResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roomid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRoomResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRoomResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRoomResponseDefaultTypeInternal() {}
  union {
    CreateRoomResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRoomResponseDefaultTypeInternal _CreateRoomResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateRoomTCPRequest::CreateRoomTCPRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roomid_)*/uint64_t{0u}
  , /*decltype(_impl_.tcproomid_)*/uint64_t{0u}
  , /*decltype(_impl_.serverid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRoomTCPRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRoomTCPRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRoomTCPRequestDefaultTypeInternal() {}
  union {
    CreateRoomTCPRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRoomTCPRequestDefaultTypeInternal _CreateRoomTCPRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateRoomTCPResponse::CreateRoomTCPResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hostaidx_)*/uint64_t{0u}
  , /*decltype(_impl_.mapid_)*/0u
  , /*decltype(_impl_.minmembercount_)*/0u
  , /*decltype(_impl_.roomid_)*/uint64_t{0u}
  , /*decltype(_impl_.tcproomid_)*/uint64_t{0u}
  , /*decltype(_impl_.maxmembercount_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRoomTCPResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRoomTCPResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRoomTCPResponseDefaultTypeInternal() {}
  union {
    CreateRoomTCPResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRoomTCPResponseDefaultTypeInternal _CreateRoomTCPResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveRoomTCPRequest::RemoveRoomTCPRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roomid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveRoomTCPRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveRoomTCPRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveRoomTCPRequestDefaultTypeInternal() {}
  union {
    RemoveRoomTCPRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveRoomTCPRequestDefaultTypeInternal _RemoveRoomTCPRequest_default_instance_;
PROTOBUF_CONSTEXPR EnterRoomRequest::EnterRoomRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.aidx_)*/uint64_t{0u}
  , /*decltype(_impl_.roomid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnterRoomRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnterRoomRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnterRoomRequestDefaultTypeInternal() {}
  union {
    EnterRoomRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnterRoomRequestDefaultTypeInternal _EnterRoomRequest_default_instance_;
PROTOBUF_CONSTEXPR EnterRoomResponse::EnterRoomResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.tcproomid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnterRoomResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnterRoomResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnterRoomResponseDefaultTypeInternal() {}
  union {
    EnterRoomResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnterRoomResponseDefaultTypeInternal _EnterRoomResponse_default_instance_;
PROTOBUF_CONSTEXPR LeaveRoomRequest::LeaveRoomRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aidx_)*/uint64_t{0u}
  , /*decltype(_impl_.roomid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaveRoomRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveRoomRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveRoomRequestDefaultTypeInternal() {}
  union {
    LeaveRoomRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveRoomRequestDefaultTypeInternal _LeaveRoomRequest_default_instance_;
PROTOBUF_CONSTEXPR StartGameRequest::StartGameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hostaidx_)*/uint64_t{0u}
  , /*decltype(_impl_.roomid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StartGameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartGameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartGameRequestDefaultTypeInternal() {}
  union {
    StartGameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartGameRequestDefaultTypeInternal _StartGameRequest_default_instance_;
PROTOBUF_CONSTEXPR GetRoomListResponse::GetRoomListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roominfos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRoomListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRoomListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRoomListResponseDefaultTypeInternal() {}
  union {
    GetRoomListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRoomListResponseDefaultTypeInternal _GetRoomListResponse_default_instance_;
PROTOBUF_CONSTEXPR RoomList::RoomList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roominfos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomListDefaultTypeInternal() {}
  union {
    RoomList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomListDefaultTypeInternal _RoomList_default_instance_;
static ::_pb::Metadata file_level_metadata_match_2eproto[21];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_match_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_match_2eproto = nullptr;

const uint32_t TableStruct_match_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Response, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerInfo, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::ServerInfo, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::ServerInfo, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::ServerInfo, _impl_.roomlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegistServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RegistServerRequest, _impl_.serverinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegistServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RegistServerResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::RegistServerResponse, _impl_.serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoveServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RemoveServerRequest, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::RemoveServerRequest, _impl_.region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ServerInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ServerInfoList, _impl_.serverinfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PUser, _impl_.aidx_),
  PROTOBUF_FIELD_OFFSET(::PUser, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::PUser, _impl_.region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RoomInfo, _impl_.hostaidx_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, _impl_.minmembercount_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, _impl_.maxmembercount_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, _impl_.nowmembercount_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, _impl_.roomid_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, _impl_.locked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetRoomListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetRoomListRequest, _impl_.region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CreateRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CreateRoomRequest, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomRequest, _impl_.hostaidx_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomRequest, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomRequest, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomRequest, _impl_.minmembercount_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomRequest, _impl_.maxmembercount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CreateRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CreateRoomResponse, _impl_.roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CreateRoomTCPRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CreateRoomTCPRequest, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomTCPRequest, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomTCPRequest, _impl_.roomid_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomTCPRequest, _impl_.tcproomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CreateRoomTCPResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CreateRoomTCPResponse, _impl_.hostaidx_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomTCPResponse, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomTCPResponse, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomTCPResponse, _impl_.minmembercount_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomTCPResponse, _impl_.maxmembercount_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomTCPResponse, _impl_.roomid_),
  PROTOBUF_FIELD_OFFSET(::CreateRoomTCPResponse, _impl_.tcproomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoveRoomTCPRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RemoveRoomTCPRequest, _impl_.roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnterRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EnterRoomRequest, _impl_.aidx_),
  PROTOBUF_FIELD_OFFSET(::EnterRoomRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::EnterRoomRequest, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::EnterRoomRequest, _impl_.roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnterRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EnterRoomResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::EnterRoomResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::EnterRoomResponse, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::EnterRoomResponse, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::EnterRoomResponse, _impl_.tcproomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LeaveRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LeaveRoomRequest, _impl_.aidx_),
  PROTOBUF_FIELD_OFFSET(::LeaveRoomRequest, _impl_.roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StartGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StartGameRequest, _impl_.hostaidx_),
  PROTOBUF_FIELD_OFFSET(::StartGameRequest, _impl_.roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetRoomListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetRoomListResponse, _impl_.roominfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoomList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RoomList, _impl_.roominfos_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Request)},
  { 6, -1, -1, sizeof(::Response)},
  { 13, -1, -1, sizeof(::ServerInfo)},
  { 23, -1, -1, sizeof(::RegistServerRequest)},
  { 30, -1, -1, sizeof(::RegistServerResponse)},
  { 38, -1, -1, sizeof(::RemoveServerRequest)},
  { 46, -1, -1, sizeof(::ServerInfoList)},
  { 53, -1, -1, sizeof(::PUser)},
  { 62, -1, -1, sizeof(::RoomInfo)},
  { 76, -1, -1, sizeof(::GetRoomListRequest)},
  { 83, -1, -1, sizeof(::CreateRoomRequest)},
  { 95, -1, -1, sizeof(::CreateRoomResponse)},
  { 102, -1, -1, sizeof(::CreateRoomTCPRequest)},
  { 112, -1, -1, sizeof(::CreateRoomTCPResponse)},
  { 125, -1, -1, sizeof(::RemoveRoomTCPRequest)},
  { 132, -1, -1, sizeof(::EnterRoomRequest)},
  { 142, -1, -1, sizeof(::EnterRoomResponse)},
  { 153, -1, -1, sizeof(::LeaveRoomRequest)},
  { 161, -1, -1, sizeof(::StartGameRequest)},
  { 169, -1, -1, sizeof(::GetRoomListResponse)},
  { 176, -1, -1, sizeof(::RoomList)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Request_default_instance_._instance,
  &::_Response_default_instance_._instance,
  &::_ServerInfo_default_instance_._instance,
  &::_RegistServerRequest_default_instance_._instance,
  &::_RegistServerResponse_default_instance_._instance,
  &::_RemoveServerRequest_default_instance_._instance,
  &::_ServerInfoList_default_instance_._instance,
  &::_PUser_default_instance_._instance,
  &::_RoomInfo_default_instance_._instance,
  &::_GetRoomListRequest_default_instance_._instance,
  &::_CreateRoomRequest_default_instance_._instance,
  &::_CreateRoomResponse_default_instance_._instance,
  &::_CreateRoomTCPRequest_default_instance_._instance,
  &::_CreateRoomTCPResponse_default_instance_._instance,
  &::_RemoveRoomTCPRequest_default_instance_._instance,
  &::_EnterRoomRequest_default_instance_._instance,
  &::_EnterRoomResponse_default_instance_._instance,
  &::_LeaveRoomRequest_default_instance_._instance,
  &::_StartGameRequest_default_instance_._instance,
  &::_GetRoomListResponse_default_instance_._instance,
  &::_RoomList_default_instance_._instance,
};

const char descriptor_table_protodef_match_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013match.proto\"\t\n\007Request\"\032\n\010Response\022\016\n\006"
  "result\030\001 \001(\010\"U\n\nServerInfo\022\014\n\004host\030\001 \001(\t"
  "\022\014\n\004port\030\002 \001(\r\022\016\n\006region\030\003 \001(\t\022\033\n\010roomLi"
  "st\030\004 \001(\0132\t.RoomList\"6\n\023RegistServerReque"
  "st\022\037\n\nserverInfo\030\001 \001(\0132\013.ServerInfo\"8\n\024R"
  "egistServerResponse\022\016\n\006result\030\001 \001(\010\022\020\n\010s"
  "erverId\030\002 \001(\r\"7\n\023RemoveServerRequest\022\020\n\010"
  "serverId\030\001 \001(\r\022\016\n\006region\030\002 \001(\t\"2\n\016Server"
  "InfoList\022 \n\013serverInfos\030\001 \003(\0132\013.ServerIn"
  "fo\"3\n\005PUser\022\014\n\004aidx\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022"
  "\016\n\006region\030\003 \001(\t\"\242\001\n\010RoomInfo\022\020\n\010hostAidx"
  "\030\001 \001(\004\022\r\n\005title\030\002 \001(\t\022\r\n\005mapId\030\003 \001(\r\022\026\n\016"
  "minMemberCount\030\004 \001(\r\022\026\n\016maxMemberCount\030\005"
  " \001(\r\022\026\n\016nowMemberCount\030\006 \001(\r\022\016\n\006roomId\030\007"
  " \001(\004\022\016\n\006locked\030\010 \001(\010\"$\n\022GetRoomListReque"
  "st\022\016\n\006region\030\001 \001(\t\"\203\001\n\021CreateRoomRequest"
  "\022\016\n\006region\030\001 \001(\t\022\020\n\010hostAidx\030\002 \001(\004\022\r\n\005ti"
  "tle\030\003 \001(\t\022\r\n\005mapId\030\004 \001(\r\022\026\n\016minMemberCou"
  "nt\030\005 \001(\r\022\026\n\016maxMemberCount\030\006 \001(\r\"$\n\022Crea"
  "teRoomResponse\022\016\n\006roomId\030\001 \001(\004\"[\n\024Create"
  "RoomTCPRequest\022\016\n\006region\030\001 \001(\t\022\020\n\010server"
  "Id\030\002 \001(\r\022\016\n\006roomId\030\003 \001(\004\022\021\n\ttcpRoomId\030\004 "
  "\001(\004\"\232\001\n\025CreateRoomTCPResponse\022\020\n\010hostAid"
  "x\030\001 \001(\004\022\r\n\005title\030\002 \001(\t\022\r\n\005mapId\030\003 \001(\r\022\026\n"
  "\016minMemberCount\030\004 \001(\r\022\026\n\016maxMemberCount\030"
  "\005 \001(\r\022\016\n\006roomId\030\006 \001(\004\022\021\n\ttcpRoomId\030\007 \001(\004"
  "\"&\n\024RemoveRoomTCPRequest\022\016\n\006roomId\030\001 \001(\004"
  "\"N\n\020EnterRoomRequest\022\014\n\004aidx\030\001 \001(\004\022\014\n\004na"
  "me\030\002 \001(\t\022\016\n\006region\030\003 \001(\t\022\016\n\006roomId\030\004 \001(\004"
  "\"d\n\021EnterRoomResponse\022\017\n\007success\030\001 \001(\010\022\017"
  "\n\007message\030\002 \001(\t\022\014\n\004host\030\003 \001(\t\022\014\n\004port\030\004 "
  "\001(\r\022\021\n\ttcpRoomId\030\005 \001(\004\"0\n\020LeaveRoomReque"
  "st\022\014\n\004aidx\030\001 \001(\004\022\016\n\006roomId\030\002 \001(\004\"4\n\020Star"
  "tGameRequest\022\020\n\010hostAidx\030\001 \001(\004\022\016\n\006roomId"
  "\030\002 \001(\004\"3\n\023GetRoomListResponse\022\034\n\troomInf"
  "os\030\001 \003(\0132\t.RoomInfo\"(\n\010RoomList\022\034\n\troomI"
  "nfos\030\001 \003(\0132\t.RoomInfo2\313\003\n\014MatchService\022:"
  "\n\013GetRoomList\022\023.GetRoomListRequest\032\024.Get"
  "RoomListResponse\"\000\0227\n\nCreateRoom\022\022.Creat"
  "eRoomRequest\032\023.CreateRoomResponse\"\000\0224\n\tE"
  "nterRoom\022\021.EnterRoomRequest\032\022.EnterRoomR"
  "esponse\"\000\022+\n\tLeaveRoom\022\021.LeaveRoomReques"
  "t\032\t.Response\"\000\022+\n\tStartGame\022\021.StartGameR"
  "equest\032\t.Response\"\000\022D\n\rCreateRoomTCP\022\025.C"
  "reateRoomTCPRequest\032\026.CreateRoomTCPRespo"
  "nse\"\000(\0010\001\022=\n\014RegistServer\022\024.RegistServer"
  "Request\032\025.RegistServerResponse\"\000\0221\n\014Remo"
  "veServer\022\024.RemoveServerRequest\032\t.Respons"
  "e\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_match_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_match_2eproto = {
    false, false, 1931, descriptor_table_protodef_match_2eproto,
    "match.proto",
    &descriptor_table_match_2eproto_once, nullptr, 0, 21,
    schemas, file_default_instances, TableStruct_match_2eproto::offsets,
    file_level_metadata_match_2eproto, file_level_enum_descriptors_match_2eproto,
    file_level_service_descriptors_match_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_match_2eproto_getter() {
  return &descriptor_table_match_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_match_2eproto(&descriptor_table_match_2eproto);

// ===================================================================

class Request::_Internal {
 public:
};

Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[0]);
}

// ===================================================================

class Response::_Internal {
 public:
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:Response)
}

inline void Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[1]);
}

// ===================================================================

class ServerInfo::_Internal {
 public:
  static const ::RoomList& roomlist(const ServerInfo* msg);
};

const ::RoomList&
ServerInfo::_Internal::roomlist(const ServerInfo* msg) {
  return *msg->_impl_.roomlist_;
}
ServerInfo::ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.roomlist_){nullptr}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_roomlist()) {
    _this->_impl_.roomlist_ = new ::RoomList(*from._impl_.roomlist_);
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:ServerInfo)
}

inline void ServerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.roomlist_){nullptr}
    , decltype(_impl_.port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:ServerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
  _impl_.region_.Destroy();
  if (this != internal_default_instance()) delete _impl_.roomlist_;
}

void ServerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.roomlist_ != nullptr) {
    delete _impl_.roomlist_;
  }
  _impl_.roomlist_ = nullptr;
  _impl_.port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerInfo.host"));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ServerInfo.region"));
        } else
          goto handle_unusual;
        continue;
      // .RoomList roomList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_roomlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerInfo.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // string region = 3;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ServerInfo.region");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_region(), target);
  }

  // .RoomList roomList = 4;
  if (this->_internal_has_roomlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::roomlist(this),
        _Internal::roomlist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string region = 3;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // .RoomList roomList = 4;
  if (this->_internal_has_roomlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.roomlist_);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerInfo::GetClassData() const { return &_class_data_; }


void ServerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerInfo*>(&to_msg);
  auto& from = static_cast<const ServerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (from._internal_has_roomlist()) {
    _this->_internal_mutable_roomlist()->::RoomList::MergeFrom(
        from._internal_roomlist());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.port_)
      + sizeof(ServerInfo::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.roomlist_)>(
          reinterpret_cast<char*>(&_impl_.roomlist_),
          reinterpret_cast<char*>(&other->_impl_.roomlist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[2]);
}

// ===================================================================

class RegistServerRequest::_Internal {
 public:
  static const ::ServerInfo& serverinfo(const RegistServerRequest* msg);
};

const ::ServerInfo&
RegistServerRequest::_Internal::serverinfo(const RegistServerRequest* msg) {
  return *msg->_impl_.serverinfo_;
}
RegistServerRequest::RegistServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RegistServerRequest)
}
RegistServerRequest::RegistServerRequest(const RegistServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistServerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serverinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_serverinfo()) {
    _this->_impl_.serverinfo_ = new ::ServerInfo(*from._impl_.serverinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:RegistServerRequest)
}

inline void RegistServerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serverinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegistServerRequest::~RegistServerRequest() {
  // @@protoc_insertion_point(destructor:RegistServerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.serverinfo_;
}

void RegistServerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RegistServerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.serverinfo_ != nullptr) {
    delete _impl_.serverinfo_;
  }
  _impl_.serverinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistServerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ServerInfo serverInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_serverinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistServerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegistServerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ServerInfo serverInfo = 1;
  if (this->_internal_has_serverinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::serverinfo(this),
        _Internal::serverinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegistServerRequest)
  return target;
}

size_t RegistServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegistServerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ServerInfo serverInfo = 1;
  if (this->_internal_has_serverinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.serverinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistServerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistServerRequest::GetClassData() const { return &_class_data_; }


void RegistServerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistServerRequest*>(&to_msg);
  auto& from = static_cast<const RegistServerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RegistServerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_serverinfo()) {
    _this->_internal_mutable_serverinfo()->::ServerInfo::MergeFrom(
        from._internal_serverinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistServerRequest::CopyFrom(const RegistServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegistServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistServerRequest::IsInitialized() const {
  return true;
}

void RegistServerRequest::InternalSwap(RegistServerRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.serverinfo_, other->_impl_.serverinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistServerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[3]);
}

// ===================================================================

class RegistServerResponse::_Internal {
 public:
};

RegistServerResponse::RegistServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RegistServerResponse)
}
RegistServerResponse::RegistServerResponse(const RegistServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistServerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.serverid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.serverid_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.serverid_));
  // @@protoc_insertion_point(copy_constructor:RegistServerResponse)
}

inline void RegistServerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){false}
    , decltype(_impl_.serverid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegistServerResponse::~RegistServerResponse() {
  // @@protoc_insertion_point(destructor:RegistServerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegistServerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RegistServerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.serverid_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistServerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 serverId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistServerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegistServerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // uint32 serverId = 2;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegistServerResponse)
  return target;
}

size_t RegistServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegistServerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  // uint32 serverId = 2;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistServerResponse::GetClassData() const { return &_class_data_; }


void RegistServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistServerResponse*>(&to_msg);
  auto& from = static_cast<const RegistServerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RegistServerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistServerResponse::CopyFrom(const RegistServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegistServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistServerResponse::IsInitialized() const {
  return true;
}

void RegistServerResponse::InternalSwap(RegistServerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegistServerResponse, _impl_.serverid_)
      + sizeof(RegistServerResponse::_impl_.serverid_)
      - PROTOBUF_FIELD_OFFSET(RegistServerResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistServerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[4]);
}

// ===================================================================

class RemoveServerRequest::_Internal {
 public:
};

RemoveServerRequest::RemoveServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RemoveServerRequest)
}
RemoveServerRequest::RemoveServerRequest(const RemoveServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveServerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){}
    , decltype(_impl_.serverid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.serverid_ = from._impl_.serverid_;
  // @@protoc_insertion_point(copy_constructor:RemoveServerRequest)
}

inline void RemoveServerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){}
    , decltype(_impl_.serverid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoveServerRequest::~RemoveServerRequest() {
  // @@protoc_insertion_point(destructor:RemoveServerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.region_.Destroy();
}

void RemoveServerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoveServerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.region_.ClearToEmpty();
  _impl_.serverid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveServerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RemoveServerRequest.region"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveServerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoveServerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverid(), target);
  }

  // string region = 2;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RemoveServerRequest.region");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoveServerRequest)
  return target;
}

size_t RemoveServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoveServerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string region = 2;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveServerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveServerRequest::GetClassData() const { return &_class_data_; }


void RemoveServerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveServerRequest*>(&to_msg);
  auto& from = static_cast<const RemoveServerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RemoveServerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveServerRequest::CopyFrom(const RemoveServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoveServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveServerRequest::IsInitialized() const {
  return true;
}

void RemoveServerRequest::InternalSwap(RemoveServerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  swap(_impl_.serverid_, other->_impl_.serverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveServerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[5]);
}

// ===================================================================

class ServerInfoList::_Internal {
 public:
};

ServerInfoList::ServerInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ServerInfoList)
}
ServerInfoList::ServerInfoList(const ServerInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerInfoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serverinfos_){from._impl_.serverinfos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ServerInfoList)
}

inline void ServerInfoList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serverinfos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerInfoList::~ServerInfoList() {
  // @@protoc_insertion_point(destructor:ServerInfoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serverinfos_.~RepeatedPtrField();
}

void ServerInfoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerInfoList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serverinfos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ServerInfo serverInfos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_serverinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerInfoList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerInfoList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ServerInfo serverInfos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_serverinfos_size()); i < n; i++) {
    const auto& repfield = this->_internal_serverinfos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerInfoList)
  return target;
}

size_t ServerInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerInfoList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ServerInfo serverInfos = 1;
  total_size += 1UL * this->_internal_serverinfos_size();
  for (const auto& msg : this->_impl_.serverinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerInfoList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerInfoList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerInfoList::GetClassData() const { return &_class_data_; }


void ServerInfoList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerInfoList*>(&to_msg);
  auto& from = static_cast<const ServerInfoList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ServerInfoList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.serverinfos_.MergeFrom(from._impl_.serverinfos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerInfoList::CopyFrom(const ServerInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfoList::IsInitialized() const {
  return true;
}

void ServerInfoList::InternalSwap(ServerInfoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.serverinfos_.InternalSwap(&other->_impl_.serverinfos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfoList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[6]);
}

// ===================================================================

class PUser::_Internal {
 public:
};

PUser::PUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PUser)
}
PUser::PUser(const PUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.aidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.aidx_ = from._impl_.aidx_;
  // @@protoc_insertion_point(copy_constructor:PUser)
}

inline void PUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.aidx_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PUser::~PUser() {
  // @@protoc_insertion_point(destructor:PUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.region_.Destroy();
}

void PUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PUser::Clear() {
// @@protoc_insertion_point(message_clear_start:PUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  _impl_.aidx_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 aidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PUser.name"));
        } else
          goto handle_unusual;
        continue;
      // string region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PUser.region"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 aidx = 1;
  if (this->_internal_aidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_aidx(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PUser.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string region = 3;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PUser.region");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PUser)
  return target;
}

size_t PUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string region = 3;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // uint64 aidx = 1;
  if (this->_internal_aidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_aidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PUser::GetClassData() const { return &_class_data_; }


void PUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PUser*>(&to_msg);
  auto& from = static_cast<const PUser&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PUser)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (from._internal_aidx() != 0) {
    _this->_internal_set_aidx(from._internal_aidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PUser::CopyFrom(const PUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PUser::IsInitialized() const {
  return true;
}

void PUser::InternalSwap(PUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  swap(_impl_.aidx_, other->_impl_.aidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[7]);
}

// ===================================================================

class RoomInfo::_Internal {
 public:
};

RoomInfo::RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RoomInfo)
}
RoomInfo::RoomInfo(const RoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.hostaidx_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.minmembercount_){}
    , decltype(_impl_.maxmembercount_){}
    , decltype(_impl_.nowmembercount_){}
    , decltype(_impl_.roomid_){}
    , decltype(_impl_.locked_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.hostaidx_, &from._impl_.hostaidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.locked_) -
    reinterpret_cast<char*>(&_impl_.hostaidx_)) + sizeof(_impl_.locked_));
  // @@protoc_insertion_point(copy_constructor:RoomInfo)
}

inline void RoomInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.hostaidx_){uint64_t{0u}}
    , decltype(_impl_.mapid_){0u}
    , decltype(_impl_.minmembercount_){0u}
    , decltype(_impl_.maxmembercount_){0u}
    , decltype(_impl_.nowmembercount_){0u}
    , decltype(_impl_.roomid_){uint64_t{0u}}
    , decltype(_impl_.locked_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:RoomInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
}

void RoomInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  ::memset(&_impl_.hostaidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.locked_) -
      reinterpret_cast<char*>(&_impl_.hostaidx_)) + sizeof(_impl_.locked_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hostAidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hostaidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RoomInfo.title"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mapId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minMemberCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.minmembercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxMemberCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.maxmembercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nowMemberCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.nowmembercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 roomId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool locked = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hostAidx = 1;
  if (this->_internal_hostaidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hostaidx(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RoomInfo.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // uint32 mapId = 3;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mapid(), target);
  }

  // uint32 minMemberCount = 4;
  if (this->_internal_minmembercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_minmembercount(), target);
  }

  // uint32 maxMemberCount = 5;
  if (this->_internal_maxmembercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maxmembercount(), target);
  }

  // uint32 nowMemberCount = 6;
  if (this->_internal_nowmembercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_nowmembercount(), target);
  }

  // uint64 roomId = 7;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_roomid(), target);
  }

  // bool locked = 8;
  if (this->_internal_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_locked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomInfo)
  return target;
}

size_t RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // uint64 hostAidx = 1;
  if (this->_internal_hostaidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hostaidx());
  }

  // uint32 mapId = 3;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // uint32 minMemberCount = 4;
  if (this->_internal_minmembercount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minmembercount());
  }

  // uint32 maxMemberCount = 5;
  if (this->_internal_maxmembercount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxmembercount());
  }

  // uint32 nowMemberCount = 6;
  if (this->_internal_nowmembercount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nowmembercount());
  }

  // uint64 roomId = 7;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roomid());
  }

  // bool locked = 8;
  if (this->_internal_locked() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomInfo::GetClassData() const { return &_class_data_; }


void RoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomInfo*>(&to_msg);
  auto& from = static_cast<const RoomInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RoomInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_hostaidx() != 0) {
    _this->_internal_set_hostaidx(from._internal_hostaidx());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_minmembercount() != 0) {
    _this->_internal_set_minmembercount(from._internal_minmembercount());
  }
  if (from._internal_maxmembercount() != 0) {
    _this->_internal_set_maxmembercount(from._internal_maxmembercount());
  }
  if (from._internal_nowmembercount() != 0) {
    _this->_internal_set_nowmembercount(from._internal_nowmembercount());
  }
  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_locked() != 0) {
    _this->_internal_set_locked(from._internal_locked());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  return true;
}

void RoomInfo::InternalSwap(RoomInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.locked_)
      + sizeof(RoomInfo::_impl_.locked_)
      - PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.hostaidx_)>(
          reinterpret_cast<char*>(&_impl_.hostaidx_),
          reinterpret_cast<char*>(&other->_impl_.hostaidx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[8]);
}

// ===================================================================

class GetRoomListRequest::_Internal {
 public:
};

GetRoomListRequest::GetRoomListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetRoomListRequest)
}
GetRoomListRequest::GetRoomListRequest(const GetRoomListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRoomListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GetRoomListRequest)
}

inline void GetRoomListRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetRoomListRequest::~GetRoomListRequest() {
  // @@protoc_insertion_point(destructor:GetRoomListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRoomListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.region_.Destroy();
}

void GetRoomListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRoomListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetRoomListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.region_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRoomListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetRoomListRequest.region"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRoomListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetRoomListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string region = 1;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetRoomListRequest.region");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetRoomListRequest)
  return target;
}

size_t GetRoomListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetRoomListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string region = 1;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRoomListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRoomListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRoomListRequest::GetClassData() const { return &_class_data_; }


void GetRoomListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRoomListRequest*>(&to_msg);
  auto& from = static_cast<const GetRoomListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetRoomListRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRoomListRequest::CopyFrom(const GetRoomListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetRoomListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomListRequest::IsInitialized() const {
  return true;
}

void GetRoomListRequest::InternalSwap(GetRoomListRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRoomListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[9]);
}

// ===================================================================

class CreateRoomRequest::_Internal {
 public:
};

CreateRoomRequest::CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CreateRoomRequest)
}
CreateRoomRequest::CreateRoomRequest(const CreateRoomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRoomRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.hostaidx_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.minmembercount_){}
    , decltype(_impl_.maxmembercount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.hostaidx_, &from._impl_.hostaidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxmembercount_) -
    reinterpret_cast<char*>(&_impl_.hostaidx_)) + sizeof(_impl_.maxmembercount_));
  // @@protoc_insertion_point(copy_constructor:CreateRoomRequest)
}

inline void CreateRoomRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.hostaidx_){uint64_t{0u}}
    , decltype(_impl_.mapid_){0u}
    , decltype(_impl_.minmembercount_){0u}
    , decltype(_impl_.maxmembercount_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateRoomRequest::~CreateRoomRequest() {
  // @@protoc_insertion_point(destructor:CreateRoomRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRoomRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.region_.Destroy();
  _impl_.title_.Destroy();
}

void CreateRoomRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateRoomRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.region_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  ::memset(&_impl_.hostaidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxmembercount_) -
      reinterpret_cast<char*>(&_impl_.hostaidx_)) + sizeof(_impl_.maxmembercount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoomRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateRoomRequest.region"));
        } else
          goto handle_unusual;
        continue;
      // uint64 hostAidx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hostaidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateRoomRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mapId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minMemberCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.minmembercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxMemberCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.maxmembercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRoomRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateRoomRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string region = 1;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateRoomRequest.region");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_region(), target);
  }

  // uint64 hostAidx = 2;
  if (this->_internal_hostaidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_hostaidx(), target);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateRoomRequest.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // uint32 mapId = 4;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mapid(), target);
  }

  // uint32 minMemberCount = 5;
  if (this->_internal_minmembercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_minmembercount(), target);
  }

  // uint32 maxMemberCount = 6;
  if (this->_internal_maxmembercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_maxmembercount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateRoomRequest)
  return target;
}

size_t CreateRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateRoomRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string region = 1;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // uint64 hostAidx = 2;
  if (this->_internal_hostaidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hostaidx());
  }

  // uint32 mapId = 4;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // uint32 minMemberCount = 5;
  if (this->_internal_minmembercount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minmembercount());
  }

  // uint32 maxMemberCount = 6;
  if (this->_internal_maxmembercount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxmembercount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRoomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoomRequest::GetClassData() const { return &_class_data_; }


void CreateRoomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRoomRequest*>(&to_msg);
  auto& from = static_cast<const CreateRoomRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CreateRoomRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_hostaidx() != 0) {
    _this->_internal_set_hostaidx(from._internal_hostaidx());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_minmembercount() != 0) {
    _this->_internal_set_minmembercount(from._internal_minmembercount());
  }
  if (from._internal_maxmembercount() != 0) {
    _this->_internal_set_maxmembercount(from._internal_maxmembercount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoomRequest::CopyFrom(const CreateRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomRequest::IsInitialized() const {
  return true;
}

void CreateRoomRequest::InternalSwap(CreateRoomRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRoomRequest, _impl_.maxmembercount_)
      + sizeof(CreateRoomRequest::_impl_.maxmembercount_)
      - PROTOBUF_FIELD_OFFSET(CreateRoomRequest, _impl_.hostaidx_)>(
          reinterpret_cast<char*>(&_impl_.hostaidx_),
          reinterpret_cast<char*>(&other->_impl_.hostaidx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[10]);
}

// ===================================================================

class CreateRoomResponse::_Internal {
 public:
};

CreateRoomResponse::CreateRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CreateRoomResponse)
}
CreateRoomResponse::CreateRoomResponse(const CreateRoomResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRoomResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.roomid_ = from._impl_.roomid_;
  // @@protoc_insertion_point(copy_constructor:CreateRoomResponse)
}

inline void CreateRoomResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateRoomResponse::~CreateRoomResponse() {
  // @@protoc_insertion_point(destructor:CreateRoomResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRoomResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateRoomResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateRoomResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roomid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoomResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRoomResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateRoomResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateRoomResponse)
  return target;
}

size_t CreateRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateRoomResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoomResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRoomResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoomResponse::GetClassData() const { return &_class_data_; }


void CreateRoomResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRoomResponse*>(&to_msg);
  auto& from = static_cast<const CreateRoomResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CreateRoomResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoomResponse::CopyFrom(const CreateRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomResponse::IsInitialized() const {
  return true;
}

void CreateRoomResponse::InternalSwap(CreateRoomResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.roomid_, other->_impl_.roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[11]);
}

// ===================================================================

class CreateRoomTCPRequest::_Internal {
 public:
};

CreateRoomTCPRequest::CreateRoomTCPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CreateRoomTCPRequest)
}
CreateRoomTCPRequest::CreateRoomTCPRequest(const CreateRoomTCPRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRoomTCPRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){}
    , decltype(_impl_.roomid_){}
    , decltype(_impl_.tcproomid_){}
    , decltype(_impl_.serverid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.roomid_, &from._impl_.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.serverid_) -
    reinterpret_cast<char*>(&_impl_.roomid_)) + sizeof(_impl_.serverid_));
  // @@protoc_insertion_point(copy_constructor:CreateRoomTCPRequest)
}

inline void CreateRoomTCPRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.region_){}
    , decltype(_impl_.roomid_){uint64_t{0u}}
    , decltype(_impl_.tcproomid_){uint64_t{0u}}
    , decltype(_impl_.serverid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateRoomTCPRequest::~CreateRoomTCPRequest() {
  // @@protoc_insertion_point(destructor:CreateRoomTCPRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRoomTCPRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.region_.Destroy();
}

void CreateRoomTCPRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRoomTCPRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateRoomTCPRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.region_.ClearToEmpty();
  ::memset(&_impl_.roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.serverid_) -
      reinterpret_cast<char*>(&_impl_.roomid_)) + sizeof(_impl_.serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoomTCPRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateRoomTCPRequest.region"));
        } else
          goto handle_unusual;
        continue;
      // uint32 serverId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 roomId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tcpRoomId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tcproomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRoomTCPRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateRoomTCPRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string region = 1;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateRoomTCPRequest.region");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_region(), target);
  }

  // uint32 serverId = 2;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_serverid(), target);
  }

  // uint64 roomId = 3;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_roomid(), target);
  }

  // uint64 tcpRoomId = 4;
  if (this->_internal_tcproomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_tcproomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateRoomTCPRequest)
  return target;
}

size_t CreateRoomTCPRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateRoomTCPRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string region = 1;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // uint64 roomId = 3;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roomid());
  }

  // uint64 tcpRoomId = 4;
  if (this->_internal_tcproomid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tcproomid());
  }

  // uint32 serverId = 2;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoomTCPRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRoomTCPRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoomTCPRequest::GetClassData() const { return &_class_data_; }


void CreateRoomTCPRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRoomTCPRequest*>(&to_msg);
  auto& from = static_cast<const CreateRoomTCPRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CreateRoomTCPRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_tcproomid() != 0) {
    _this->_internal_set_tcproomid(from._internal_tcproomid());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoomTCPRequest::CopyFrom(const CreateRoomTCPRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateRoomTCPRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomTCPRequest::IsInitialized() const {
  return true;
}

void CreateRoomTCPRequest::InternalSwap(CreateRoomTCPRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRoomTCPRequest, _impl_.serverid_)
      + sizeof(CreateRoomTCPRequest::_impl_.serverid_)
      - PROTOBUF_FIELD_OFFSET(CreateRoomTCPRequest, _impl_.roomid_)>(
          reinterpret_cast<char*>(&_impl_.roomid_),
          reinterpret_cast<char*>(&other->_impl_.roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomTCPRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[12]);
}

// ===================================================================

class CreateRoomTCPResponse::_Internal {
 public:
};

CreateRoomTCPResponse::CreateRoomTCPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CreateRoomTCPResponse)
}
CreateRoomTCPResponse::CreateRoomTCPResponse(const CreateRoomTCPResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRoomTCPResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.hostaidx_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.minmembercount_){}
    , decltype(_impl_.roomid_){}
    , decltype(_impl_.tcproomid_){}
    , decltype(_impl_.maxmembercount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.hostaidx_, &from._impl_.hostaidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxmembercount_) -
    reinterpret_cast<char*>(&_impl_.hostaidx_)) + sizeof(_impl_.maxmembercount_));
  // @@protoc_insertion_point(copy_constructor:CreateRoomTCPResponse)
}

inline void CreateRoomTCPResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.hostaidx_){uint64_t{0u}}
    , decltype(_impl_.mapid_){0u}
    , decltype(_impl_.minmembercount_){0u}
    , decltype(_impl_.roomid_){uint64_t{0u}}
    , decltype(_impl_.tcproomid_){uint64_t{0u}}
    , decltype(_impl_.maxmembercount_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateRoomTCPResponse::~CreateRoomTCPResponse() {
  // @@protoc_insertion_point(destructor:CreateRoomTCPResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRoomTCPResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
}

void CreateRoomTCPResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRoomTCPResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateRoomTCPResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  ::memset(&_impl_.hostaidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxmembercount_) -
      reinterpret_cast<char*>(&_impl_.hostaidx_)) + sizeof(_impl_.maxmembercount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoomTCPResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hostAidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hostaidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CreateRoomTCPResponse.title"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mapId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minMemberCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.minmembercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxMemberCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.maxmembercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 roomId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tcpRoomId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.tcproomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRoomTCPResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateRoomTCPResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hostAidx = 1;
  if (this->_internal_hostaidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hostaidx(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CreateRoomTCPResponse.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // uint32 mapId = 3;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mapid(), target);
  }

  // uint32 minMemberCount = 4;
  if (this->_internal_minmembercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_minmembercount(), target);
  }

  // uint32 maxMemberCount = 5;
  if (this->_internal_maxmembercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maxmembercount(), target);
  }

  // uint64 roomId = 6;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_roomid(), target);
  }

  // uint64 tcpRoomId = 7;
  if (this->_internal_tcproomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_tcproomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateRoomTCPResponse)
  return target;
}

size_t CreateRoomTCPResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateRoomTCPResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // uint64 hostAidx = 1;
  if (this->_internal_hostaidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hostaidx());
  }

  // uint32 mapId = 3;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // uint32 minMemberCount = 4;
  if (this->_internal_minmembercount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minmembercount());
  }

  // uint64 roomId = 6;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roomid());
  }

  // uint64 tcpRoomId = 7;
  if (this->_internal_tcproomid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tcproomid());
  }

  // uint32 maxMemberCount = 5;
  if (this->_internal_maxmembercount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxmembercount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoomTCPResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRoomTCPResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoomTCPResponse::GetClassData() const { return &_class_data_; }


void CreateRoomTCPResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRoomTCPResponse*>(&to_msg);
  auto& from = static_cast<const CreateRoomTCPResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CreateRoomTCPResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_hostaidx() != 0) {
    _this->_internal_set_hostaidx(from._internal_hostaidx());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_minmembercount() != 0) {
    _this->_internal_set_minmembercount(from._internal_minmembercount());
  }
  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_tcproomid() != 0) {
    _this->_internal_set_tcproomid(from._internal_tcproomid());
  }
  if (from._internal_maxmembercount() != 0) {
    _this->_internal_set_maxmembercount(from._internal_maxmembercount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoomTCPResponse::CopyFrom(const CreateRoomTCPResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateRoomTCPResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomTCPResponse::IsInitialized() const {
  return true;
}

void CreateRoomTCPResponse::InternalSwap(CreateRoomTCPResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateRoomTCPResponse, _impl_.maxmembercount_)
      + sizeof(CreateRoomTCPResponse::_impl_.maxmembercount_)
      - PROTOBUF_FIELD_OFFSET(CreateRoomTCPResponse, _impl_.hostaidx_)>(
          reinterpret_cast<char*>(&_impl_.hostaidx_),
          reinterpret_cast<char*>(&other->_impl_.hostaidx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomTCPResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[13]);
}

// ===================================================================

class RemoveRoomTCPRequest::_Internal {
 public:
};

RemoveRoomTCPRequest::RemoveRoomTCPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RemoveRoomTCPRequest)
}
RemoveRoomTCPRequest::RemoveRoomTCPRequest(const RemoveRoomTCPRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveRoomTCPRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.roomid_ = from._impl_.roomid_;
  // @@protoc_insertion_point(copy_constructor:RemoveRoomTCPRequest)
}

inline void RemoveRoomTCPRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoveRoomTCPRequest::~RemoveRoomTCPRequest() {
  // @@protoc_insertion_point(destructor:RemoveRoomTCPRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveRoomTCPRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveRoomTCPRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveRoomTCPRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoveRoomTCPRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roomid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveRoomTCPRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveRoomTCPRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoveRoomTCPRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoveRoomTCPRequest)
  return target;
}

size_t RemoveRoomTCPRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoveRoomTCPRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveRoomTCPRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveRoomTCPRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveRoomTCPRequest::GetClassData() const { return &_class_data_; }


void RemoveRoomTCPRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveRoomTCPRequest*>(&to_msg);
  auto& from = static_cast<const RemoveRoomTCPRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RemoveRoomTCPRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveRoomTCPRequest::CopyFrom(const RemoveRoomTCPRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoveRoomTCPRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRoomTCPRequest::IsInitialized() const {
  return true;
}

void RemoveRoomTCPRequest::InternalSwap(RemoveRoomTCPRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.roomid_, other->_impl_.roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveRoomTCPRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[14]);
}

// ===================================================================

class EnterRoomRequest::_Internal {
 public:
};

EnterRoomRequest::EnterRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EnterRoomRequest)
}
EnterRoomRequest::EnterRoomRequest(const EnterRoomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnterRoomRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.aidx_){}
    , decltype(_impl_.roomid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.aidx_, &from._impl_.aidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roomid_) -
    reinterpret_cast<char*>(&_impl_.aidx_)) + sizeof(_impl_.roomid_));
  // @@protoc_insertion_point(copy_constructor:EnterRoomRequest)
}

inline void EnterRoomRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.aidx_){uint64_t{0u}}
    , decltype(_impl_.roomid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EnterRoomRequest::~EnterRoomRequest() {
  // @@protoc_insertion_point(destructor:EnterRoomRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnterRoomRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.region_.Destroy();
}

void EnterRoomRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnterRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EnterRoomRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  ::memset(&_impl_.aidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.roomid_) -
      reinterpret_cast<char*>(&_impl_.aidx_)) + sizeof(_impl_.roomid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterRoomRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 aidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EnterRoomRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EnterRoomRequest.region"));
        } else
          goto handle_unusual;
        continue;
      // uint64 roomId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterRoomRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnterRoomRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 aidx = 1;
  if (this->_internal_aidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_aidx(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnterRoomRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string region = 3;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnterRoomRequest.region");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_region(), target);
  }

  // uint64 roomId = 4;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnterRoomRequest)
  return target;
}

size_t EnterRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnterRoomRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string region = 3;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // uint64 aidx = 1;
  if (this->_internal_aidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_aidx());
  }

  // uint64 roomId = 4;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterRoomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnterRoomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterRoomRequest::GetClassData() const { return &_class_data_; }


void EnterRoomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnterRoomRequest*>(&to_msg);
  auto& from = static_cast<const EnterRoomRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EnterRoomRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (from._internal_aidx() != 0) {
    _this->_internal_set_aidx(from._internal_aidx());
  }
  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterRoomRequest::CopyFrom(const EnterRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnterRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomRequest::IsInitialized() const {
  return true;
}

void EnterRoomRequest::InternalSwap(EnterRoomRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterRoomRequest, _impl_.roomid_)
      + sizeof(EnterRoomRequest::_impl_.roomid_)
      - PROTOBUF_FIELD_OFFSET(EnterRoomRequest, _impl_.aidx_)>(
          reinterpret_cast<char*>(&_impl_.aidx_),
          reinterpret_cast<char*>(&other->_impl_.aidx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterRoomRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[15]);
}

// ===================================================================

class EnterRoomResponse::_Internal {
 public:
};

EnterRoomResponse::EnterRoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EnterRoomResponse)
}
EnterRoomResponse::EnterRoomResponse(const EnterRoomResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnterRoomResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.tcproomid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tcproomid_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.tcproomid_));
  // @@protoc_insertion_point(copy_constructor:EnterRoomResponse)
}

inline void EnterRoomResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.tcproomid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EnterRoomResponse::~EnterRoomResponse() {
  // @@protoc_insertion_point(destructor:EnterRoomResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnterRoomResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.host_.Destroy();
}

void EnterRoomResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnterRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:EnterRoomResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.host_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tcproomid_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.tcproomid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterRoomResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EnterRoomResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // string host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EnterRoomResponse.host"));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 tcpRoomId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.tcproomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterRoomResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnterRoomResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnterRoomResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string host = 3;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EnterRoomResponse.host");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_host(), target);
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port(), target);
  }

  // uint64 tcpRoomId = 5;
  if (this->_internal_tcproomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_tcproomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnterRoomResponse)
  return target;
}

size_t EnterRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnterRoomResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string host = 3;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint64 tcpRoomId = 5;
  if (this->_internal_tcproomid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tcproomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterRoomResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnterRoomResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterRoomResponse::GetClassData() const { return &_class_data_; }


void EnterRoomResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnterRoomResponse*>(&to_msg);
  auto& from = static_cast<const EnterRoomResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EnterRoomResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_tcproomid() != 0) {
    _this->_internal_set_tcproomid(from._internal_tcproomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterRoomResponse::CopyFrom(const EnterRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnterRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomResponse::IsInitialized() const {
  return true;
}

void EnterRoomResponse::InternalSwap(EnterRoomResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterRoomResponse, _impl_.tcproomid_)
      + sizeof(EnterRoomResponse::_impl_.tcproomid_)
      - PROTOBUF_FIELD_OFFSET(EnterRoomResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterRoomResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[16]);
}

// ===================================================================

class LeaveRoomRequest::_Internal {
 public:
};

LeaveRoomRequest::LeaveRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LeaveRoomRequest)
}
LeaveRoomRequest::LeaveRoomRequest(const LeaveRoomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveRoomRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aidx_){}
    , decltype(_impl_.roomid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.aidx_, &from._impl_.aidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roomid_) -
    reinterpret_cast<char*>(&_impl_.aidx_)) + sizeof(_impl_.roomid_));
  // @@protoc_insertion_point(copy_constructor:LeaveRoomRequest)
}

inline void LeaveRoomRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aidx_){uint64_t{0u}}
    , decltype(_impl_.roomid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeaveRoomRequest::~LeaveRoomRequest() {
  // @@protoc_insertion_point(destructor:LeaveRoomRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveRoomRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaveRoomRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:LeaveRoomRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.aidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.roomid_) -
      reinterpret_cast<char*>(&_impl_.aidx_)) + sizeof(_impl_.roomid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveRoomRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 aidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 roomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveRoomRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LeaveRoomRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 aidx = 1;
  if (this->_internal_aidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_aidx(), target);
  }

  // uint64 roomId = 2;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LeaveRoomRequest)
  return target;
}

size_t LeaveRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LeaveRoomRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 aidx = 1;
  if (this->_internal_aidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_aidx());
  }

  // uint64 roomId = 2;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveRoomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveRoomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveRoomRequest::GetClassData() const { return &_class_data_; }


void LeaveRoomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveRoomRequest*>(&to_msg);
  auto& from = static_cast<const LeaveRoomRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LeaveRoomRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_aidx() != 0) {
    _this->_internal_set_aidx(from._internal_aidx());
  }
  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveRoomRequest::CopyFrom(const LeaveRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LeaveRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoomRequest::IsInitialized() const {
  return true;
}

void LeaveRoomRequest::InternalSwap(LeaveRoomRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveRoomRequest, _impl_.roomid_)
      + sizeof(LeaveRoomRequest::_impl_.roomid_)
      - PROTOBUF_FIELD_OFFSET(LeaveRoomRequest, _impl_.aidx_)>(
          reinterpret_cast<char*>(&_impl_.aidx_),
          reinterpret_cast<char*>(&other->_impl_.aidx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveRoomRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[17]);
}

// ===================================================================

class StartGameRequest::_Internal {
 public:
};

StartGameRequest::StartGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StartGameRequest)
}
StartGameRequest::StartGameRequest(const StartGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartGameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hostaidx_){}
    , decltype(_impl_.roomid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hostaidx_, &from._impl_.hostaidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roomid_) -
    reinterpret_cast<char*>(&_impl_.hostaidx_)) + sizeof(_impl_.roomid_));
  // @@protoc_insertion_point(copy_constructor:StartGameRequest)
}

inline void StartGameRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hostaidx_){uint64_t{0u}}
    , decltype(_impl_.roomid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StartGameRequest::~StartGameRequest() {
  // @@protoc_insertion_point(destructor:StartGameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartGameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StartGameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hostaidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.roomid_) -
      reinterpret_cast<char*>(&_impl_.hostaidx_)) + sizeof(_impl_.roomid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartGameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hostAidx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hostaidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 roomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartGameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartGameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hostAidx = 1;
  if (this->_internal_hostaidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hostaidx(), target);
  }

  // uint64 roomId = 2;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartGameRequest)
  return target;
}

size_t StartGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartGameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hostAidx = 1;
  if (this->_internal_hostaidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hostaidx());
  }

  // uint64 roomId = 2;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartGameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartGameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartGameRequest::GetClassData() const { return &_class_data_; }


void StartGameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartGameRequest*>(&to_msg);
  auto& from = static_cast<const StartGameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StartGameRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hostaidx() != 0) {
    _this->_internal_set_hostaidx(from._internal_hostaidx());
  }
  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartGameRequest::CopyFrom(const StartGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartGameRequest::IsInitialized() const {
  return true;
}

void StartGameRequest::InternalSwap(StartGameRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartGameRequest, _impl_.roomid_)
      + sizeof(StartGameRequest::_impl_.roomid_)
      - PROTOBUF_FIELD_OFFSET(StartGameRequest, _impl_.hostaidx_)>(
          reinterpret_cast<char*>(&_impl_.hostaidx_),
          reinterpret_cast<char*>(&other->_impl_.hostaidx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartGameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[18]);
}

// ===================================================================

class GetRoomListResponse::_Internal {
 public:
};

GetRoomListResponse::GetRoomListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetRoomListResponse)
}
GetRoomListResponse::GetRoomListResponse(const GetRoomListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRoomListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roominfos_){from._impl_.roominfos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetRoomListResponse)
}

inline void GetRoomListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roominfos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRoomListResponse::~GetRoomListResponse() {
  // @@protoc_insertion_point(destructor:GetRoomListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRoomListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roominfos_.~RepeatedPtrField();
}

void GetRoomListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRoomListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetRoomListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roominfos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRoomListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .RoomInfo roomInfos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roominfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRoomListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetRoomListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RoomInfo roomInfos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roominfos_size()); i < n; i++) {
    const auto& repfield = this->_internal_roominfos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetRoomListResponse)
  return target;
}

size_t GetRoomListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetRoomListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoomInfo roomInfos = 1;
  total_size += 1UL * this->_internal_roominfos_size();
  for (const auto& msg : this->_impl_.roominfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRoomListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRoomListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRoomListResponse::GetClassData() const { return &_class_data_; }


void GetRoomListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRoomListResponse*>(&to_msg);
  auto& from = static_cast<const GetRoomListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetRoomListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.roominfos_.MergeFrom(from._impl_.roominfos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRoomListResponse::CopyFrom(const GetRoomListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetRoomListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomListResponse::IsInitialized() const {
  return true;
}

void GetRoomListResponse::InternalSwap(GetRoomListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.roominfos_.InternalSwap(&other->_impl_.roominfos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRoomListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[19]);
}

// ===================================================================

class RoomList::_Internal {
 public:
};

RoomList::RoomList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RoomList)
}
RoomList::RoomList(const RoomList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roominfos_){from._impl_.roominfos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RoomList)
}

inline void RoomList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roominfos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoomList::~RoomList() {
  // @@protoc_insertion_point(destructor:RoomList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roominfos_.~RepeatedPtrField();
}

void RoomList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomList::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roominfos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .RoomInfo roomInfos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roominfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RoomInfo roomInfos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roominfos_size()); i < n; i++) {
    const auto& repfield = this->_internal_roominfos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomList)
  return target;
}

size_t RoomList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoomInfo roomInfos = 1;
  total_size += 1UL * this->_internal_roominfos_size();
  for (const auto& msg : this->_impl_.roominfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomList::GetClassData() const { return &_class_data_; }


void RoomList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomList*>(&to_msg);
  auto& from = static_cast<const RoomList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RoomList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.roominfos_.MergeFrom(from._impl_.roominfos_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomList::CopyFrom(const RoomList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomList::IsInitialized() const {
  return true;
}

void RoomList::InternalSwap(RoomList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.roominfos_.InternalSwap(&other->_impl_.roominfos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_match_2eproto_getter, &descriptor_table_match_2eproto_once,
      file_level_metadata_match_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Request*
Arena::CreateMaybeMessage< ::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Response*
Arena::CreateMaybeMessage< ::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerInfo*
Arena::CreateMaybeMessage< ::ServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::RegistServerRequest*
Arena::CreateMaybeMessage< ::RegistServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegistServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RegistServerResponse*
Arena::CreateMaybeMessage< ::RegistServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegistServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoveServerRequest*
Arena::CreateMaybeMessage< ::RemoveServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoveServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ServerInfoList*
Arena::CreateMaybeMessage< ::ServerInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ServerInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::PUser*
Arena::CreateMaybeMessage< ::PUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PUser >(arena);
}
template<> PROTOBUF_NOINLINE ::RoomInfo*
Arena::CreateMaybeMessage< ::RoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GetRoomListRequest*
Arena::CreateMaybeMessage< ::GetRoomListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetRoomListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateRoomRequest*
Arena::CreateMaybeMessage< ::CreateRoomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateRoomResponse*
Arena::CreateMaybeMessage< ::CreateRoomResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateRoomTCPRequest*
Arena::CreateMaybeMessage< ::CreateRoomTCPRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateRoomTCPRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CreateRoomTCPResponse*
Arena::CreateMaybeMessage< ::CreateRoomTCPResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CreateRoomTCPResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoveRoomTCPRequest*
Arena::CreateMaybeMessage< ::RemoveRoomTCPRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoveRoomTCPRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::EnterRoomRequest*
Arena::CreateMaybeMessage< ::EnterRoomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EnterRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::EnterRoomResponse*
Arena::CreateMaybeMessage< ::EnterRoomResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EnterRoomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::LeaveRoomRequest*
Arena::CreateMaybeMessage< ::LeaveRoomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LeaveRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StartGameRequest*
Arena::CreateMaybeMessage< ::StartGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StartGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetRoomListResponse*
Arena::CreateMaybeMessage< ::GetRoomListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetRoomListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::RoomList*
Arena::CreateMaybeMessage< ::RoomList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoomList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
