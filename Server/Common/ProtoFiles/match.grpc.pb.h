// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: match.proto
#ifndef GRPC_match_2eproto__INCLUDED
#define GRPC_match_2eproto__INCLUDED

#include "match.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class MatchService final {
 public:
  static constexpr char const* service_full_name() {
    return "MatchService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // node 2 match(game)
    virtual ::grpc::Status GetRoomList(::grpc::ClientContext* context, const ::User& request, ::RoomList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RoomList>> AsyncGetRoomList(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RoomList>>(AsyncGetRoomListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RoomList>> PrepareAsyncGetRoomList(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RoomList>>(PrepareAsyncGetRoomListRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateRoom(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::Room* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Room>> AsyncCreateRoom(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Room>>(AsyncCreateRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Room>> PrepareAsyncCreateRoom(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Room>>(PrepareAsyncCreateRoomRaw(context, request, cq));
    }
    virtual ::grpc::Status EnterRoom(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncEnterRoom(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncEnterRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncEnterRoom(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncEnterRoomRaw(context, request, cq));
    }
    virtual ::grpc::Status LeaveRoom(::grpc::ClientContext* context, const ::User& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncLeaveRoom(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncLeaveRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncLeaveRoom(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncLeaveRoomRaw(context, request, cq));
    }
    virtual ::grpc::Status StartGame(::grpc::ClientContext* context, const ::User& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncStartGame(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncStartGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncStartGame(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncStartGameRaw(context, request, cq));
    }
    // match 2 node(chat)
    virtual ::grpc::Status EnterUser(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncEnterUser(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncEnterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncEnterUser(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncEnterUserRaw(context, request, cq));
    }
    virtual ::grpc::Status LeaveUser(::grpc::ClientContext* context, const ::User& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncLeaveUser(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncLeaveUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncLeaveUser(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncLeaveUserRaw(context, request, cq));
    }
    // match 2 tcp
    virtual ::grpc::Status CreateRoomTCP(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::Room* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Room>> AsyncCreateRoomTCP(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Room>>(AsyncCreateRoomTCPRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Room>> PrepareAsyncCreateRoomTCP(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Room>>(PrepareAsyncCreateRoomTCPRaw(context, request, cq));
    }
    // tcp 2 match
    virtual ::grpc::Status AddServer(::grpc::ClientContext* context, const ::ServerInfo& request, ::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> AsyncAddServer(::grpc::ClientContext* context, const ::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(AsyncAddServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>> PrepareAsyncAddServer(::grpc::ClientContext* context, const ::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Empty>>(PrepareAsyncAddServerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // node 2 match(game)
      virtual void GetRoomList(::grpc::ClientContext* context, const ::User* request, ::RoomList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRoomList(::grpc::ClientContext* context, const ::User* request, ::RoomList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateRoom(::grpc::ClientContext* context, const ::CreatedRoomInfo* request, ::Room* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRoom(::grpc::ClientContext* context, const ::CreatedRoomInfo* request, ::Room* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EnterRoom(::grpc::ClientContext* context, const ::EnteredRoomInfo* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EnterRoom(::grpc::ClientContext* context, const ::EnteredRoomInfo* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LeaveRoom(::grpc::ClientContext* context, const ::User* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LeaveRoom(::grpc::ClientContext* context, const ::User* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StartGame(::grpc::ClientContext* context, const ::User* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartGame(::grpc::ClientContext* context, const ::User* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // match 2 node(chat)
      virtual void EnterUser(::grpc::ClientContext* context, const ::EnteredRoomInfo* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EnterUser(::grpc::ClientContext* context, const ::EnteredRoomInfo* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LeaveUser(::grpc::ClientContext* context, const ::User* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LeaveUser(::grpc::ClientContext* context, const ::User* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // match 2 tcp
      virtual void CreateRoomTCP(::grpc::ClientContext* context, const ::CreatedRoomInfo* request, ::Room* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRoomTCP(::grpc::ClientContext* context, const ::CreatedRoomInfo* request, ::Room* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // tcp 2 match
      virtual void AddServer(::grpc::ClientContext* context, const ::ServerInfo* request, ::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddServer(::grpc::ClientContext* context, const ::ServerInfo* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RoomList>* AsyncGetRoomListRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RoomList>* PrepareAsyncGetRoomListRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Room>* AsyncCreateRoomRaw(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Room>* PrepareAsyncCreateRoomRaw(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncEnterRoomRaw(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncEnterRoomRaw(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncStartGameRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncStartGameRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncEnterUserRaw(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncEnterUserRaw(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncLeaveUserRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncLeaveUserRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Room>* AsyncCreateRoomTCPRaw(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Room>* PrepareAsyncCreateRoomTCPRaw(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* AsyncAddServerRaw(::grpc::ClientContext* context, const ::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Empty>* PrepareAsyncAddServerRaw(::grpc::ClientContext* context, const ::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetRoomList(::grpc::ClientContext* context, const ::User& request, ::RoomList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RoomList>> AsyncGetRoomList(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RoomList>>(AsyncGetRoomListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RoomList>> PrepareAsyncGetRoomList(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RoomList>>(PrepareAsyncGetRoomListRaw(context, request, cq));
    }
    ::grpc::Status CreateRoom(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::Room* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Room>> AsyncCreateRoom(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Room>>(AsyncCreateRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Room>> PrepareAsyncCreateRoom(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Room>>(PrepareAsyncCreateRoomRaw(context, request, cq));
    }
    ::grpc::Status EnterRoom(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncEnterRoom(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncEnterRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncEnterRoom(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncEnterRoomRaw(context, request, cq));
    }
    ::grpc::Status LeaveRoom(::grpc::ClientContext* context, const ::User& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncLeaveRoom(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncLeaveRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncLeaveRoom(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncLeaveRoomRaw(context, request, cq));
    }
    ::grpc::Status StartGame(::grpc::ClientContext* context, const ::User& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncStartGame(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncStartGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncStartGame(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncStartGameRaw(context, request, cq));
    }
    ::grpc::Status EnterUser(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncEnterUser(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncEnterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncEnterUser(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncEnterUserRaw(context, request, cq));
    }
    ::grpc::Status LeaveUser(::grpc::ClientContext* context, const ::User& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncLeaveUser(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncLeaveUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncLeaveUser(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncLeaveUserRaw(context, request, cq));
    }
    ::grpc::Status CreateRoomTCP(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::Room* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Room>> AsyncCreateRoomTCP(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Room>>(AsyncCreateRoomTCPRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Room>> PrepareAsyncCreateRoomTCP(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Room>>(PrepareAsyncCreateRoomTCPRaw(context, request, cq));
    }
    ::grpc::Status AddServer(::grpc::ClientContext* context, const ::ServerInfo& request, ::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> AsyncAddServer(::grpc::ClientContext* context, const ::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(AsyncAddServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>> PrepareAsyncAddServer(::grpc::ClientContext* context, const ::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Empty>>(PrepareAsyncAddServerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetRoomList(::grpc::ClientContext* context, const ::User* request, ::RoomList* response, std::function<void(::grpc::Status)>) override;
      void GetRoomList(::grpc::ClientContext* context, const ::User* request, ::RoomList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateRoom(::grpc::ClientContext* context, const ::CreatedRoomInfo* request, ::Room* response, std::function<void(::grpc::Status)>) override;
      void CreateRoom(::grpc::ClientContext* context, const ::CreatedRoomInfo* request, ::Room* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EnterRoom(::grpc::ClientContext* context, const ::EnteredRoomInfo* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void EnterRoom(::grpc::ClientContext* context, const ::EnteredRoomInfo* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LeaveRoom(::grpc::ClientContext* context, const ::User* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void LeaveRoom(::grpc::ClientContext* context, const ::User* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StartGame(::grpc::ClientContext* context, const ::User* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void StartGame(::grpc::ClientContext* context, const ::User* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EnterUser(::grpc::ClientContext* context, const ::EnteredRoomInfo* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void EnterUser(::grpc::ClientContext* context, const ::EnteredRoomInfo* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LeaveUser(::grpc::ClientContext* context, const ::User* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void LeaveUser(::grpc::ClientContext* context, const ::User* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateRoomTCP(::grpc::ClientContext* context, const ::CreatedRoomInfo* request, ::Room* response, std::function<void(::grpc::Status)>) override;
      void CreateRoomTCP(::grpc::ClientContext* context, const ::CreatedRoomInfo* request, ::Room* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddServer(::grpc::ClientContext* context, const ::ServerInfo* request, ::Empty* response, std::function<void(::grpc::Status)>) override;
      void AddServer(::grpc::ClientContext* context, const ::ServerInfo* request, ::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::RoomList>* AsyncGetRoomListRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RoomList>* PrepareAsyncGetRoomListRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Room>* AsyncCreateRoomRaw(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Room>* PrepareAsyncCreateRoomRaw(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncEnterRoomRaw(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncEnterRoomRaw(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncLeaveRoomRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncStartGameRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncStartGameRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncEnterUserRaw(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncEnterUserRaw(::grpc::ClientContext* context, const ::EnteredRoomInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncLeaveUserRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncLeaveUserRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Room>* AsyncCreateRoomTCPRaw(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Room>* PrepareAsyncCreateRoomTCPRaw(::grpc::ClientContext* context, const ::CreatedRoomInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* AsyncAddServerRaw(::grpc::ClientContext* context, const ::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Empty>* PrepareAsyncAddServerRaw(::grpc::ClientContext* context, const ::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetRoomList_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRoom_;
    const ::grpc::internal::RpcMethod rpcmethod_EnterRoom_;
    const ::grpc::internal::RpcMethod rpcmethod_LeaveRoom_;
    const ::grpc::internal::RpcMethod rpcmethod_StartGame_;
    const ::grpc::internal::RpcMethod rpcmethod_EnterUser_;
    const ::grpc::internal::RpcMethod rpcmethod_LeaveUser_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRoomTCP_;
    const ::grpc::internal::RpcMethod rpcmethod_AddServer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // node 2 match(game)
    virtual ::grpc::Status GetRoomList(::grpc::ServerContext* context, const ::User* request, ::RoomList* response);
    virtual ::grpc::Status CreateRoom(::grpc::ServerContext* context, const ::CreatedRoomInfo* request, ::Room* response);
    virtual ::grpc::Status EnterRoom(::grpc::ServerContext* context, const ::EnteredRoomInfo* request, ::Empty* response);
    virtual ::grpc::Status LeaveRoom(::grpc::ServerContext* context, const ::User* request, ::Empty* response);
    virtual ::grpc::Status StartGame(::grpc::ServerContext* context, const ::User* request, ::Empty* response);
    // match 2 node(chat)
    virtual ::grpc::Status EnterUser(::grpc::ServerContext* context, const ::EnteredRoomInfo* request, ::Empty* response);
    virtual ::grpc::Status LeaveUser(::grpc::ServerContext* context, const ::User* request, ::Empty* response);
    // match 2 tcp
    virtual ::grpc::Status CreateRoomTCP(::grpc::ServerContext* context, const ::CreatedRoomInfo* request, ::Room* response);
    // tcp 2 match
    virtual ::grpc::Status AddServer(::grpc::ServerContext* context, const ::ServerInfo* request, ::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRoomList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRoomList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetRoomList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomList(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::RoomList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoomList(::grpc::ServerContext* context, ::User* request, ::grpc::ServerAsyncResponseWriter< ::RoomList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRoom() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRoom(::grpc::ServerContext* context, ::CreatedRoomInfo* request, ::grpc::ServerAsyncResponseWriter< ::Room>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EnterRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EnterRoom() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_EnterRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterRoom(::grpc::ServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnterRoom(::grpc::ServerContext* context, ::EnteredRoomInfo* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveRoom(::grpc::ServerContext* context, ::User* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartGame() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StartGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartGame(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartGame(::grpc::ServerContext* context, ::User* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EnterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EnterUser() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_EnterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterUser(::grpc::ServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnterUser(::grpc::ServerContext* context, ::EnteredRoomInfo* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LeaveUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LeaveUser() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_LeaveUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveUser(::grpc::ServerContext* context, ::User* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRoomTCP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRoomTCP() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CreateRoomTCP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoomTCP(::grpc::ServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRoomTCP(::grpc::ServerContext* context, ::CreatedRoomInfo* request, ::grpc::ServerAsyncResponseWriter< ::Room>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddServer() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_AddServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddServer(::grpc::ServerContext* /*context*/, const ::ServerInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddServer(::grpc::ServerContext* context, ::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetRoomList<WithAsyncMethod_CreateRoom<WithAsyncMethod_EnterRoom<WithAsyncMethod_LeaveRoom<WithAsyncMethod_StartGame<WithAsyncMethod_EnterUser<WithAsyncMethod_LeaveUser<WithAsyncMethod_CreateRoomTCP<WithAsyncMethod_AddServer<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetRoomList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRoomList() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::User, ::RoomList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::User* request, ::RoomList* response) { return this->GetRoomList(context, request, response); }));}
    void SetMessageAllocatorFor_GetRoomList(
        ::grpc::MessageAllocator< ::User, ::RoomList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::User, ::RoomList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRoomList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomList(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::RoomList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRoomList(
      ::grpc::CallbackServerContext* /*context*/, const ::User* /*request*/, ::RoomList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateRoom() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::CreatedRoomInfo, ::Room>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CreatedRoomInfo* request, ::Room* response) { return this->CreateRoom(context, request, response); }));}
    void SetMessageAllocatorFor_CreateRoom(
        ::grpc::MessageAllocator< ::CreatedRoomInfo, ::Room>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CreatedRoomInfo, ::Room>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EnterRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EnterRoom() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::EnteredRoomInfo, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::EnteredRoomInfo* request, ::Empty* response) { return this->EnterRoom(context, request, response); }));}
    void SetMessageAllocatorFor_EnterRoom(
        ::grpc::MessageAllocator< ::EnteredRoomInfo, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::EnteredRoomInfo, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EnterRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterRoom(::grpc::ServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EnterRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::User, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::User* request, ::Empty* response) { return this->LeaveRoom(context, request, response); }));}
    void SetMessageAllocatorFor_LeaveRoom(
        ::grpc::MessageAllocator< ::User, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::User, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StartGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartGame() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::User, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::User* request, ::Empty* response) { return this->StartGame(context, request, response); }));}
    void SetMessageAllocatorFor_StartGame(
        ::grpc::MessageAllocator< ::User, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::User, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartGame(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartGame(
      ::grpc::CallbackServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EnterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EnterUser() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::EnteredRoomInfo, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::EnteredRoomInfo* request, ::Empty* response) { return this->EnterUser(context, request, response); }));}
    void SetMessageAllocatorFor_EnterUser(
        ::grpc::MessageAllocator< ::EnteredRoomInfo, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::EnteredRoomInfo, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EnterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterUser(::grpc::ServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EnterUser(
      ::grpc::CallbackServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LeaveUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LeaveUser() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::User, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::User* request, ::Empty* response) { return this->LeaveUser(context, request, response); }));}
    void SetMessageAllocatorFor_LeaveUser(
        ::grpc::MessageAllocator< ::User, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::User, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LeaveUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveUser(
      ::grpc::CallbackServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateRoomTCP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateRoomTCP() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::CreatedRoomInfo, ::Room>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CreatedRoomInfo* request, ::Room* response) { return this->CreateRoomTCP(context, request, response); }));}
    void SetMessageAllocatorFor_CreateRoomTCP(
        ::grpc::MessageAllocator< ::CreatedRoomInfo, ::Room>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CreatedRoomInfo, ::Room>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateRoomTCP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoomTCP(::grpc::ServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRoomTCP(
      ::grpc::CallbackServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddServer() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::ServerInfo, ::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ServerInfo* request, ::Empty* response) { return this->AddServer(context, request, response); }));}
    void SetMessageAllocatorFor_AddServer(
        ::grpc::MessageAllocator< ::ServerInfo, ::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ServerInfo, ::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddServer(::grpc::ServerContext* /*context*/, const ::ServerInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddServer(
      ::grpc::CallbackServerContext* /*context*/, const ::ServerInfo* /*request*/, ::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetRoomList<WithCallbackMethod_CreateRoom<WithCallbackMethod_EnterRoom<WithCallbackMethod_LeaveRoom<WithCallbackMethod_StartGame<WithCallbackMethod_EnterUser<WithCallbackMethod_LeaveUser<WithCallbackMethod_CreateRoomTCP<WithCallbackMethod_AddServer<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetRoomList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRoomList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetRoomList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomList(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::RoomList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRoom() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EnterRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EnterRoom() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_EnterRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterRoom(::grpc::ServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartGame() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StartGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartGame(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EnterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EnterUser() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_EnterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterUser(::grpc::ServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LeaveUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LeaveUser() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_LeaveUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRoomTCP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRoomTCP() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CreateRoomTCP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoomTCP(::grpc::ServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddServer() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_AddServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddServer(::grpc::ServerContext* /*context*/, const ::ServerInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRoomList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRoomList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetRoomList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomList(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::RoomList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoomList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRoom() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRoom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EnterRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EnterRoom() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_EnterRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterRoom(::grpc::ServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnterRoom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveRoom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartGame() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StartGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartGame(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EnterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EnterUser() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_EnterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterUser(::grpc::ServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEnterUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LeaveUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LeaveUser() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_LeaveUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRoomTCP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRoomTCP() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_CreateRoomTCP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoomTCP(::grpc::ServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRoomTCP(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddServer() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_AddServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddServer(::grpc::ServerContext* /*context*/, const ::ServerInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRoomList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRoomList() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRoomList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRoomList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomList(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::RoomList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRoomList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateRoom() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateRoom(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EnterRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EnterRoom() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EnterRoom(context, request, response); }));
    }
    ~WithRawCallbackMethod_EnterRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterRoom(::grpc::ServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EnterRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LeaveRoom(context, request, response); }));
    }
    ~WithRawCallbackMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartGame() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartGame(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartGame(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EnterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EnterUser() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EnterUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_EnterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EnterUser(::grpc::ServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EnterUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LeaveUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LeaveUser() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LeaveUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_LeaveUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateRoomTCP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateRoomTCP() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateRoomTCP(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateRoomTCP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoomTCP(::grpc::ServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRoomTCP(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddServer() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddServer(::grpc::ServerContext* /*context*/, const ::ServerInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRoomList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRoomList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::User, ::RoomList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::User, ::RoomList>* streamer) {
                       return this->StreamedGetRoomList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRoomList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRoomList(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::RoomList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRoomList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::User,::RoomList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRoom() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CreatedRoomInfo, ::Room>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CreatedRoomInfo, ::Room>* streamer) {
                       return this->StreamedCreateRoom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRoom(::grpc::ServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CreatedRoomInfo,::Room>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EnterRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EnterRoom() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::EnteredRoomInfo, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::EnteredRoomInfo, ::Empty>* streamer) {
                       return this->StreamedEnterRoom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EnterRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EnterRoom(::grpc::ServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEnterRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EnteredRoomInfo,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LeaveRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LeaveRoom() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::User, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::User, ::Empty>* streamer) {
                       return this->StreamedLeaveRoom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LeaveRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LeaveRoom(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLeaveRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::User,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartGame() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::User, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::User, ::Empty>* streamer) {
                       return this->StreamedStartGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartGame(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::User,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EnterUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EnterUser() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::EnteredRoomInfo, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::EnteredRoomInfo, ::Empty>* streamer) {
                       return this->StreamedEnterUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EnterUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EnterUser(::grpc::ServerContext* /*context*/, const ::EnteredRoomInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEnterUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EnteredRoomInfo,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LeaveUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LeaveUser() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::User, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::User, ::Empty>* streamer) {
                       return this->StreamedLeaveUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LeaveUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LeaveUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLeaveUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::User,::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRoomTCP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRoomTCP() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CreatedRoomInfo, ::Room>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CreatedRoomInfo, ::Room>* streamer) {
                       return this->StreamedCreateRoomTCP(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateRoomTCP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRoomTCP(::grpc::ServerContext* /*context*/, const ::CreatedRoomInfo* /*request*/, ::Room* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRoomTCP(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CreatedRoomInfo,::Room>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddServer() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ServerInfo, ::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ServerInfo, ::Empty>* streamer) {
                       return this->StreamedAddServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddServer(::grpc::ServerContext* /*context*/, const ::ServerInfo* /*request*/, ::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ServerInfo,::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetRoomList<WithStreamedUnaryMethod_CreateRoom<WithStreamedUnaryMethod_EnterRoom<WithStreamedUnaryMethod_LeaveRoom<WithStreamedUnaryMethod_StartGame<WithStreamedUnaryMethod_EnterUser<WithStreamedUnaryMethod_LeaveUser<WithStreamedUnaryMethod_CreateRoomTCP<WithStreamedUnaryMethod_AddServer<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetRoomList<WithStreamedUnaryMethod_CreateRoom<WithStreamedUnaryMethod_EnterRoom<WithStreamedUnaryMethod_LeaveRoom<WithStreamedUnaryMethod_StartGame<WithStreamedUnaryMethod_EnterUser<WithStreamedUnaryMethod_LeaveUser<WithStreamedUnaryMethod_CreateRoomTCP<WithStreamedUnaryMethod_AddServer<Service > > > > > > > > > StreamedService;
};


#endif  // GRPC_match_2eproto__INCLUDED
