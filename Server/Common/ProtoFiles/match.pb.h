// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_match_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_match_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_match_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_match_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_match_2eproto;
class CreatedRoomInfo;
struct CreatedRoomInfoDefaultTypeInternal;
extern CreatedRoomInfoDefaultTypeInternal _CreatedRoomInfo_default_instance_;
class DetailedRoom;
struct DetailedRoomDefaultTypeInternal;
extern DetailedRoomDefaultTypeInternal _DetailedRoom_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class EnteredRoomInfo;
struct EnteredRoomInfoDefaultTypeInternal;
extern EnteredRoomInfoDefaultTypeInternal _EnteredRoomInfo_default_instance_;
class Room;
struct RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class RoomList;
struct RoomListDefaultTypeInternal;
extern RoomListDefaultTypeInternal _RoomList_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class ServerInfoList;
struct ServerInfoListDefaultTypeInternal;
extern ServerInfoListDefaultTypeInternal _ServerInfoList_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CreatedRoomInfo* Arena::CreateMaybeMessage<::CreatedRoomInfo>(Arena*);
template<> ::DetailedRoom* Arena::CreateMaybeMessage<::DetailedRoom>(Arena*);
template<> ::Empty* Arena::CreateMaybeMessage<::Empty>(Arena*);
template<> ::EnteredRoomInfo* Arena::CreateMaybeMessage<::EnteredRoomInfo>(Arena*);
template<> ::Room* Arena::CreateMaybeMessage<::Room>(Arena*);
template<> ::RoomList* Arena::CreateMaybeMessage<::RoomList>(Arena*);
template<> ::ServerInfo* Arena::CreateMaybeMessage<::ServerInfo>(Arena*);
template<> ::ServerInfoList* Arena::CreateMaybeMessage<::ServerInfoList>(Arena*);
template<> ::User* Arena::CreateMaybeMessage<::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  explicit PROTOBUF_CONSTEXPR ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerInfo& from) {
    ServerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerInfo";
  }
  protected:
  explicit ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kRegionFieldNumber = 3,
    kRoomListFieldNumber = 4,
    kPortFieldNumber = 2,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string region = 3;
  void clear_region();
  const std::string& region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region();
  PROTOBUF_NODISCARD std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // .RoomList roomList = 4;
  bool has_roomlist() const;
  private:
  bool _internal_has_roomlist() const;
  public:
  void clear_roomlist();
  const ::RoomList& roomlist() const;
  PROTOBUF_NODISCARD ::RoomList* release_roomlist();
  ::RoomList* mutable_roomlist();
  void set_allocated_roomlist(::RoomList* roomlist);
  private:
  const ::RoomList& _internal_roomlist() const;
  ::RoomList* _internal_mutable_roomlist();
  public:
  void unsafe_arena_set_allocated_roomlist(
      ::RoomList* roomlist);
  ::RoomList* unsafe_arena_release_roomlist();

  // int32 port = 2;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
    ::RoomList* roomlist_;
    int32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class ServerInfoList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerInfoList) */ {
 public:
  inline ServerInfoList() : ServerInfoList(nullptr) {}
  ~ServerInfoList() override;
  explicit PROTOBUF_CONSTEXPR ServerInfoList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfoList(const ServerInfoList& from);
  ServerInfoList(ServerInfoList&& from) noexcept
    : ServerInfoList() {
    *this = ::std::move(from);
  }

  inline ServerInfoList& operator=(const ServerInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfoList& operator=(ServerInfoList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfoList* internal_default_instance() {
    return reinterpret_cast<const ServerInfoList*>(
               &_ServerInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerInfoList& a, ServerInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfoList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfoList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfoList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerInfoList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerInfoList& from) {
    ServerInfoList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerInfoList";
  }
  protected:
  explicit ServerInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 1,
  };
  // repeated .ServerInfo servers = 1;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::ServerInfo* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerInfo >*
      mutable_servers();
  private:
  const ::ServerInfo& _internal_servers(int index) const;
  ::ServerInfo* _internal_add_servers();
  public:
  const ::ServerInfo& servers(int index) const;
  ::ServerInfo* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerInfo >&
      servers() const;

  // @@protoc_insertion_point(class_scope:ServerInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerInfo > servers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit PROTOBUF_CONSTEXPR User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAidxFieldNumber = 1,
    kNameFieldNumber = 2,
    kRegionFieldNumber = 3,
    kIsHostFieldNumber = 4,
  };
  // string aidx = 1;
  void clear_aidx();
  const std::string& aidx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aidx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aidx();
  PROTOBUF_NODISCARD std::string* release_aidx();
  void set_allocated_aidx(std::string* aidx);
  private:
  const std::string& _internal_aidx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aidx(const std::string& value);
  std::string* _internal_mutable_aidx();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string region = 3;
  void clear_region();
  const std::string& region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region();
  PROTOBUF_NODISCARD std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // int32 isHost = 4;
  void clear_ishost();
  int32_t ishost() const;
  void set_ishost(int32_t value);
  private:
  int32_t _internal_ishost() const;
  void _internal_set_ishost(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aidx_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
    int32_t ishost_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class Room final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Room) */ {
 public:
  inline Room() : Room(nullptr) {}
  ~Room() override;
  explicit PROTOBUF_CONSTEXPR Room(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Room(const Room& from);
  Room(Room&& from) noexcept
    : Room() {
    *this = ::std::move(from);
  }

  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline Room& operator=(Room&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Room& default_instance() {
    return *internal_default_instance();
  }
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
               &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Room& a, Room& b) {
    a.Swap(&b);
  }
  inline void Swap(Room* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Room* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Room>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Room& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Room& from) {
    Room::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Room* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Room";
  }
  protected:
  explicit Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kNameFieldNumber = 2,
    kMemberCountFieldNumber = 3,
    kMinMemberCountFieldNumber = 4,
    kMaxMemberCountFieldNumber = 5,
    kMapIdFieldNumber = 6,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 memberCount = 3;
  void clear_membercount();
  int32_t membercount() const;
  void set_membercount(int32_t value);
  private:
  int32_t _internal_membercount() const;
  void _internal_set_membercount(int32_t value);
  public:

  // int32 minMemberCount = 4;
  void clear_minmembercount();
  int32_t minmembercount() const;
  void set_minmembercount(int32_t value);
  private:
  int32_t _internal_minmembercount() const;
  void _internal_set_minmembercount(int32_t value);
  public:

  // int32 maxMemberCount = 5;
  void clear_maxmembercount();
  int32_t maxmembercount() const;
  void set_maxmembercount(int32_t value);
  private:
  int32_t _internal_maxmembercount() const;
  void _internal_set_maxmembercount(int32_t value);
  public:

  // int32 mapId = 6;
  void clear_mapid();
  int32_t mapid() const;
  void set_mapid(int32_t value);
  private:
  int32_t _internal_mapid() const;
  void _internal_set_mapid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Room)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t membercount_;
    int32_t minmembercount_;
    int32_t maxmembercount_;
    int32_t mapid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class CreatedRoomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CreatedRoomInfo) */ {
 public:
  inline CreatedRoomInfo() : CreatedRoomInfo(nullptr) {}
  ~CreatedRoomInfo() override;
  explicit PROTOBUF_CONSTEXPR CreatedRoomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatedRoomInfo(const CreatedRoomInfo& from);
  CreatedRoomInfo(CreatedRoomInfo&& from) noexcept
    : CreatedRoomInfo() {
    *this = ::std::move(from);
  }

  inline CreatedRoomInfo& operator=(const CreatedRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatedRoomInfo& operator=(CreatedRoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatedRoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatedRoomInfo* internal_default_instance() {
    return reinterpret_cast<const CreatedRoomInfo*>(
               &_CreatedRoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreatedRoomInfo& a, CreatedRoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatedRoomInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatedRoomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatedRoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatedRoomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreatedRoomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreatedRoomInfo& from) {
    CreatedRoomInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatedRoomInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CreatedRoomInfo";
  }
  protected:
  explicit CreatedRoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUserFieldNumber = 1,
    kMapIdFieldNumber = 3,
    kMinMemberCountFieldNumber = 4,
    kMaxMemberCountFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::User& user() const;
  PROTOBUF_NODISCARD ::User* release_user();
  ::User* mutable_user();
  void set_allocated_user(::User* user);
  private:
  const ::User& _internal_user() const;
  ::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::User* user);
  ::User* unsafe_arena_release_user();

  // int32 mapId = 3;
  void clear_mapid();
  int32_t mapid() const;
  void set_mapid(int32_t value);
  private:
  int32_t _internal_mapid() const;
  void _internal_set_mapid(int32_t value);
  public:

  // int32 minMemberCount = 4;
  void clear_minmembercount();
  int32_t minmembercount() const;
  void set_minmembercount(int32_t value);
  private:
  int32_t _internal_minmembercount() const;
  void _internal_set_minmembercount(int32_t value);
  public:

  // int32 maxMemberCount = 5;
  void clear_maxmembercount();
  int32_t maxmembercount() const;
  void set_maxmembercount(int32_t value);
  private:
  int32_t _internal_maxmembercount() const;
  void _internal_set_maxmembercount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CreatedRoomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::User* user_;
    int32_t mapid_;
    int32_t minmembercount_;
    int32_t maxmembercount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class EnteredRoomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnteredRoomInfo) */ {
 public:
  inline EnteredRoomInfo() : EnteredRoomInfo(nullptr) {}
  ~EnteredRoomInfo() override;
  explicit PROTOBUF_CONSTEXPR EnteredRoomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnteredRoomInfo(const EnteredRoomInfo& from);
  EnteredRoomInfo(EnteredRoomInfo&& from) noexcept
    : EnteredRoomInfo() {
    *this = ::std::move(from);
  }

  inline EnteredRoomInfo& operator=(const EnteredRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnteredRoomInfo& operator=(EnteredRoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnteredRoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnteredRoomInfo* internal_default_instance() {
    return reinterpret_cast<const EnteredRoomInfo*>(
               &_EnteredRoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EnteredRoomInfo& a, EnteredRoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EnteredRoomInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnteredRoomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnteredRoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnteredRoomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnteredRoomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnteredRoomInfo& from) {
    EnteredRoomInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnteredRoomInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnteredRoomInfo";
  }
  protected:
  explicit EnteredRoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::User& user() const;
  PROTOBUF_NODISCARD ::User* release_user();
  ::User* mutable_user();
  void set_allocated_user(::User* user);
  private:
  const ::User& _internal_user() const;
  ::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::User* user);
  ::User* unsafe_arena_release_user();

  // @@protoc_insertion_point(class_scope:EnteredRoomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::User* user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class DetailedRoom final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:DetailedRoom) */ {
 public:
  inline DetailedRoom() : DetailedRoom(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DetailedRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetailedRoom(const DetailedRoom& from);
  DetailedRoom(DetailedRoom&& from) noexcept
    : DetailedRoom() {
    *this = ::std::move(from);
  }

  inline DetailedRoom& operator=(const DetailedRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetailedRoom& operator=(DetailedRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetailedRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetailedRoom* internal_default_instance() {
    return reinterpret_cast<const DetailedRoom*>(
               &_DetailedRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DetailedRoom& a, DetailedRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(DetailedRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetailedRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetailedRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetailedRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DetailedRoom& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DetailedRoom& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DetailedRoom";
  }
  protected:
  explicit DetailedRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DetailedRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_match_2eproto;
};
// -------------------------------------------------------------------

class RoomList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoomList) */ {
 public:
  inline RoomList() : RoomList(nullptr) {}
  ~RoomList() override;
  explicit PROTOBUF_CONSTEXPR RoomList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomList(const RoomList& from);
  RoomList(RoomList&& from) noexcept
    : RoomList() {
    *this = ::std::move(from);
  }

  inline RoomList& operator=(const RoomList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomList& operator=(RoomList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomList* internal_default_instance() {
    return reinterpret_cast<const RoomList*>(
               &_RoomList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RoomList& a, RoomList& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomList& from) {
    RoomList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoomList";
  }
  protected:
  explicit RoomList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomFieldNumber = 1,
  };
  // repeated .Room room = 1;
  int room_size() const;
  private:
  int _internal_room_size() const;
  public:
  void clear_room();
  ::Room* mutable_room(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Room >*
      mutable_room();
  private:
  const ::Room& _internal_room(int index) const;
  ::Room* _internal_add_room();
  public:
  const ::Room& room(int index) const;
  ::Room* add_room();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Room >&
      room() const;

  // @@protoc_insertion_point(class_scope:RoomList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Room > room_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_match_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// ServerInfo

// string host = 1;
inline void ServerInfo::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& ServerInfo::host() const {
  // @@protoc_insertion_point(field_get:ServerInfo.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServerInfo.host)
}
inline std::string* ServerInfo::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:ServerInfo.host)
  return _s;
}
inline const std::string& ServerInfo::_internal_host() const {
  return _impl_.host_.Get();
}
inline void ServerInfo::_internal_set_host(const std::string& value) {
  
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_host() {
  
  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerInfo::release_host() {
  // @@protoc_insertion_point(field_release:ServerInfo.host)
  return _impl_.host_.Release();
}
inline void ServerInfo::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServerInfo.host)
}

// int32 port = 2;
inline void ServerInfo::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t ServerInfo::_internal_port() const {
  return _impl_.port_;
}
inline int32_t ServerInfo::port() const {
  // @@protoc_insertion_point(field_get:ServerInfo.port)
  return _internal_port();
}
inline void ServerInfo::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void ServerInfo::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ServerInfo.port)
}

// string region = 3;
inline void ServerInfo::clear_region() {
  _impl_.region_.ClearToEmpty();
}
inline const std::string& ServerInfo::region() const {
  // @@protoc_insertion_point(field_get:ServerInfo.region)
  return _internal_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_region(ArgT0&& arg0, ArgT... args) {
 
 _impl_.region_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ServerInfo.region)
}
inline std::string* ServerInfo::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:ServerInfo.region)
  return _s;
}
inline const std::string& ServerInfo::_internal_region() const {
  return _impl_.region_.Get();
}
inline void ServerInfo::_internal_set_region(const std::string& value) {
  
  _impl_.region_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_region() {
  
  return _impl_.region_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerInfo::release_region() {
  // @@protoc_insertion_point(field_release:ServerInfo.region)
  return _impl_.region_.Release();
}
inline void ServerInfo::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  _impl_.region_.SetAllocated(region, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServerInfo.region)
}

// .RoomList roomList = 4;
inline bool ServerInfo::_internal_has_roomlist() const {
  return this != internal_default_instance() && _impl_.roomlist_ != nullptr;
}
inline bool ServerInfo::has_roomlist() const {
  return _internal_has_roomlist();
}
inline void ServerInfo::clear_roomlist() {
  if (GetArenaForAllocation() == nullptr && _impl_.roomlist_ != nullptr) {
    delete _impl_.roomlist_;
  }
  _impl_.roomlist_ = nullptr;
}
inline const ::RoomList& ServerInfo::_internal_roomlist() const {
  const ::RoomList* p = _impl_.roomlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::RoomList&>(
      ::_RoomList_default_instance_);
}
inline const ::RoomList& ServerInfo::roomlist() const {
  // @@protoc_insertion_point(field_get:ServerInfo.roomList)
  return _internal_roomlist();
}
inline void ServerInfo::unsafe_arena_set_allocated_roomlist(
    ::RoomList* roomlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roomlist_);
  }
  _impl_.roomlist_ = roomlist;
  if (roomlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ServerInfo.roomList)
}
inline ::RoomList* ServerInfo::release_roomlist() {
  
  ::RoomList* temp = _impl_.roomlist_;
  _impl_.roomlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RoomList* ServerInfo::unsafe_arena_release_roomlist() {
  // @@protoc_insertion_point(field_release:ServerInfo.roomList)
  
  ::RoomList* temp = _impl_.roomlist_;
  _impl_.roomlist_ = nullptr;
  return temp;
}
inline ::RoomList* ServerInfo::_internal_mutable_roomlist() {
  
  if (_impl_.roomlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoomList>(GetArenaForAllocation());
    _impl_.roomlist_ = p;
  }
  return _impl_.roomlist_;
}
inline ::RoomList* ServerInfo::mutable_roomlist() {
  ::RoomList* _msg = _internal_mutable_roomlist();
  // @@protoc_insertion_point(field_mutable:ServerInfo.roomList)
  return _msg;
}
inline void ServerInfo::set_allocated_roomlist(::RoomList* roomlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.roomlist_;
  }
  if (roomlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(roomlist);
    if (message_arena != submessage_arena) {
      roomlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roomlist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.roomlist_ = roomlist;
  // @@protoc_insertion_point(field_set_allocated:ServerInfo.roomList)
}

// -------------------------------------------------------------------

// ServerInfoList

// repeated .ServerInfo servers = 1;
inline int ServerInfoList::_internal_servers_size() const {
  return _impl_.servers_.size();
}
inline int ServerInfoList::servers_size() const {
  return _internal_servers_size();
}
inline void ServerInfoList::clear_servers() {
  _impl_.servers_.Clear();
}
inline ::ServerInfo* ServerInfoList::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:ServerInfoList.servers)
  return _impl_.servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerInfo >*
ServerInfoList::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:ServerInfoList.servers)
  return &_impl_.servers_;
}
inline const ::ServerInfo& ServerInfoList::_internal_servers(int index) const {
  return _impl_.servers_.Get(index);
}
inline const ::ServerInfo& ServerInfoList::servers(int index) const {
  // @@protoc_insertion_point(field_get:ServerInfoList.servers)
  return _internal_servers(index);
}
inline ::ServerInfo* ServerInfoList::_internal_add_servers() {
  return _impl_.servers_.Add();
}
inline ::ServerInfo* ServerInfoList::add_servers() {
  ::ServerInfo* _add = _internal_add_servers();
  // @@protoc_insertion_point(field_add:ServerInfoList.servers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ServerInfo >&
ServerInfoList::servers() const {
  // @@protoc_insertion_point(field_list:ServerInfoList.servers)
  return _impl_.servers_;
}

// -------------------------------------------------------------------

// User

// string aidx = 1;
inline void User::clear_aidx() {
  _impl_.aidx_.ClearToEmpty();
}
inline const std::string& User::aidx() const {
  // @@protoc_insertion_point(field_get:User.aidx)
  return _internal_aidx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_aidx(ArgT0&& arg0, ArgT... args) {
 
 _impl_.aidx_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.aidx)
}
inline std::string* User::mutable_aidx() {
  std::string* _s = _internal_mutable_aidx();
  // @@protoc_insertion_point(field_mutable:User.aidx)
  return _s;
}
inline const std::string& User::_internal_aidx() const {
  return _impl_.aidx_.Get();
}
inline void User::_internal_set_aidx(const std::string& value) {
  
  _impl_.aidx_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_aidx() {
  
  return _impl_.aidx_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_aidx() {
  // @@protoc_insertion_point(field_release:User.aidx)
  return _impl_.aidx_.Release();
}
inline void User::set_allocated_aidx(std::string* aidx) {
  if (aidx != nullptr) {
    
  } else {
    
  }
  _impl_.aidx_.SetAllocated(aidx, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.aidx_.IsDefault()) {
    _impl_.aidx_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.aidx)
}

// string name = 2;
inline void User::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:User.name)
  return _impl_.name_.Release();
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.name)
}

// string region = 3;
inline void User::clear_region() {
  _impl_.region_.ClearToEmpty();
}
inline const std::string& User::region() const {
  // @@protoc_insertion_point(field_get:User.region)
  return _internal_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_region(ArgT0&& arg0, ArgT... args) {
 
 _impl_.region_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:User.region)
}
inline std::string* User::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:User.region)
  return _s;
}
inline const std::string& User::_internal_region() const {
  return _impl_.region_.Get();
}
inline void User::_internal_set_region(const std::string& value) {
  
  _impl_.region_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_region() {
  
  return _impl_.region_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_region() {
  // @@protoc_insertion_point(field_release:User.region)
  return _impl_.region_.Release();
}
inline void User::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  _impl_.region_.SetAllocated(region, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.region_.IsDefault()) {
    _impl_.region_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:User.region)
}

// int32 isHost = 4;
inline void User::clear_ishost() {
  _impl_.ishost_ = 0;
}
inline int32_t User::_internal_ishost() const {
  return _impl_.ishost_;
}
inline int32_t User::ishost() const {
  // @@protoc_insertion_point(field_get:User.isHost)
  return _internal_ishost();
}
inline void User::_internal_set_ishost(int32_t value) {
  
  _impl_.ishost_ = value;
}
inline void User::set_ishost(int32_t value) {
  _internal_set_ishost(value);
  // @@protoc_insertion_point(field_set:User.isHost)
}

// -------------------------------------------------------------------

// Room

// string key = 1;
inline void Room::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& Room::key() const {
  // @@protoc_insertion_point(field_get:Room.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Room::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Room.key)
}
inline std::string* Room::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:Room.key)
  return _s;
}
inline const std::string& Room::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Room::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Room::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* Room::release_key() {
  // @@protoc_insertion_point(field_release:Room.key)
  return _impl_.key_.Release();
}
inline void Room::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Room.key)
}

// string name = 2;
inline void Room::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Room::name() const {
  // @@protoc_insertion_point(field_get:Room.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Room::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Room.name)
}
inline std::string* Room::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Room.name)
  return _s;
}
inline const std::string& Room::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Room::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Room::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Room::release_name() {
  // @@protoc_insertion_point(field_release:Room.name)
  return _impl_.name_.Release();
}
inline void Room::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Room.name)
}

// int32 memberCount = 3;
inline void Room::clear_membercount() {
  _impl_.membercount_ = 0;
}
inline int32_t Room::_internal_membercount() const {
  return _impl_.membercount_;
}
inline int32_t Room::membercount() const {
  // @@protoc_insertion_point(field_get:Room.memberCount)
  return _internal_membercount();
}
inline void Room::_internal_set_membercount(int32_t value) {
  
  _impl_.membercount_ = value;
}
inline void Room::set_membercount(int32_t value) {
  _internal_set_membercount(value);
  // @@protoc_insertion_point(field_set:Room.memberCount)
}

// int32 minMemberCount = 4;
inline void Room::clear_minmembercount() {
  _impl_.minmembercount_ = 0;
}
inline int32_t Room::_internal_minmembercount() const {
  return _impl_.minmembercount_;
}
inline int32_t Room::minmembercount() const {
  // @@protoc_insertion_point(field_get:Room.minMemberCount)
  return _internal_minmembercount();
}
inline void Room::_internal_set_minmembercount(int32_t value) {
  
  _impl_.minmembercount_ = value;
}
inline void Room::set_minmembercount(int32_t value) {
  _internal_set_minmembercount(value);
  // @@protoc_insertion_point(field_set:Room.minMemberCount)
}

// int32 maxMemberCount = 5;
inline void Room::clear_maxmembercount() {
  _impl_.maxmembercount_ = 0;
}
inline int32_t Room::_internal_maxmembercount() const {
  return _impl_.maxmembercount_;
}
inline int32_t Room::maxmembercount() const {
  // @@protoc_insertion_point(field_get:Room.maxMemberCount)
  return _internal_maxmembercount();
}
inline void Room::_internal_set_maxmembercount(int32_t value) {
  
  _impl_.maxmembercount_ = value;
}
inline void Room::set_maxmembercount(int32_t value) {
  _internal_set_maxmembercount(value);
  // @@protoc_insertion_point(field_set:Room.maxMemberCount)
}

// int32 mapId = 6;
inline void Room::clear_mapid() {
  _impl_.mapid_ = 0;
}
inline int32_t Room::_internal_mapid() const {
  return _impl_.mapid_;
}
inline int32_t Room::mapid() const {
  // @@protoc_insertion_point(field_get:Room.mapId)
  return _internal_mapid();
}
inline void Room::_internal_set_mapid(int32_t value) {
  
  _impl_.mapid_ = value;
}
inline void Room::set_mapid(int32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:Room.mapId)
}

// -------------------------------------------------------------------

// CreatedRoomInfo

// .User user = 1;
inline bool CreatedRoomInfo::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool CreatedRoomInfo::has_user() const {
  return _internal_has_user();
}
inline void CreatedRoomInfo::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
inline const ::User& CreatedRoomInfo::_internal_user() const {
  const ::User* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::User&>(
      ::_User_default_instance_);
}
inline const ::User& CreatedRoomInfo::user() const {
  // @@protoc_insertion_point(field_get:CreatedRoomInfo.user)
  return _internal_user();
}
inline void CreatedRoomInfo::unsafe_arena_set_allocated_user(
    ::User* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CreatedRoomInfo.user)
}
inline ::User* CreatedRoomInfo::release_user() {
  
  ::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::User* CreatedRoomInfo::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:CreatedRoomInfo.user)
  
  ::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::User* CreatedRoomInfo::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::User>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::User* CreatedRoomInfo::mutable_user() {
  ::User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:CreatedRoomInfo.user)
  return _msg;
}
inline void CreatedRoomInfo::set_allocated_user(::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:CreatedRoomInfo.user)
}

// string name = 2;
inline void CreatedRoomInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreatedRoomInfo::name() const {
  // @@protoc_insertion_point(field_get:CreatedRoomInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatedRoomInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CreatedRoomInfo.name)
}
inline std::string* CreatedRoomInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CreatedRoomInfo.name)
  return _s;
}
inline const std::string& CreatedRoomInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreatedRoomInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatedRoomInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatedRoomInfo::release_name() {
  // @@protoc_insertion_point(field_release:CreatedRoomInfo.name)
  return _impl_.name_.Release();
}
inline void CreatedRoomInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CreatedRoomInfo.name)
}

// int32 mapId = 3;
inline void CreatedRoomInfo::clear_mapid() {
  _impl_.mapid_ = 0;
}
inline int32_t CreatedRoomInfo::_internal_mapid() const {
  return _impl_.mapid_;
}
inline int32_t CreatedRoomInfo::mapid() const {
  // @@protoc_insertion_point(field_get:CreatedRoomInfo.mapId)
  return _internal_mapid();
}
inline void CreatedRoomInfo::_internal_set_mapid(int32_t value) {
  
  _impl_.mapid_ = value;
}
inline void CreatedRoomInfo::set_mapid(int32_t value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:CreatedRoomInfo.mapId)
}

// int32 minMemberCount = 4;
inline void CreatedRoomInfo::clear_minmembercount() {
  _impl_.minmembercount_ = 0;
}
inline int32_t CreatedRoomInfo::_internal_minmembercount() const {
  return _impl_.minmembercount_;
}
inline int32_t CreatedRoomInfo::minmembercount() const {
  // @@protoc_insertion_point(field_get:CreatedRoomInfo.minMemberCount)
  return _internal_minmembercount();
}
inline void CreatedRoomInfo::_internal_set_minmembercount(int32_t value) {
  
  _impl_.minmembercount_ = value;
}
inline void CreatedRoomInfo::set_minmembercount(int32_t value) {
  _internal_set_minmembercount(value);
  // @@protoc_insertion_point(field_set:CreatedRoomInfo.minMemberCount)
}

// int32 maxMemberCount = 5;
inline void CreatedRoomInfo::clear_maxmembercount() {
  _impl_.maxmembercount_ = 0;
}
inline int32_t CreatedRoomInfo::_internal_maxmembercount() const {
  return _impl_.maxmembercount_;
}
inline int32_t CreatedRoomInfo::maxmembercount() const {
  // @@protoc_insertion_point(field_get:CreatedRoomInfo.maxMemberCount)
  return _internal_maxmembercount();
}
inline void CreatedRoomInfo::_internal_set_maxmembercount(int32_t value) {
  
  _impl_.maxmembercount_ = value;
}
inline void CreatedRoomInfo::set_maxmembercount(int32_t value) {
  _internal_set_maxmembercount(value);
  // @@protoc_insertion_point(field_set:CreatedRoomInfo.maxMemberCount)
}

// -------------------------------------------------------------------

// EnteredRoomInfo

// .User user = 1;
inline bool EnteredRoomInfo::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool EnteredRoomInfo::has_user() const {
  return _internal_has_user();
}
inline void EnteredRoomInfo::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
inline const ::User& EnteredRoomInfo::_internal_user() const {
  const ::User* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::User&>(
      ::_User_default_instance_);
}
inline const ::User& EnteredRoomInfo::user() const {
  // @@protoc_insertion_point(field_get:EnteredRoomInfo.user)
  return _internal_user();
}
inline void EnteredRoomInfo::unsafe_arena_set_allocated_user(
    ::User* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EnteredRoomInfo.user)
}
inline ::User* EnteredRoomInfo::release_user() {
  
  ::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::User* EnteredRoomInfo::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:EnteredRoomInfo.user)
  
  ::User* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::User* EnteredRoomInfo::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::User>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::User* EnteredRoomInfo::mutable_user() {
  ::User* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:EnteredRoomInfo.user)
  return _msg;
}
inline void EnteredRoomInfo::set_allocated_user(::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:EnteredRoomInfo.user)
}

// string key = 2;
inline void EnteredRoomInfo::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& EnteredRoomInfo::key() const {
  // @@protoc_insertion_point(field_get:EnteredRoomInfo.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnteredRoomInfo::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EnteredRoomInfo.key)
}
inline std::string* EnteredRoomInfo::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:EnteredRoomInfo.key)
  return _s;
}
inline const std::string& EnteredRoomInfo::_internal_key() const {
  return _impl_.key_.Get();
}
inline void EnteredRoomInfo::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* EnteredRoomInfo::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* EnteredRoomInfo::release_key() {
  // @@protoc_insertion_point(field_release:EnteredRoomInfo.key)
  return _impl_.key_.Release();
}
inline void EnteredRoomInfo::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EnteredRoomInfo.key)
}

// -------------------------------------------------------------------

// DetailedRoom

// -------------------------------------------------------------------

// RoomList

// repeated .Room room = 1;
inline int RoomList::_internal_room_size() const {
  return _impl_.room_.size();
}
inline int RoomList::room_size() const {
  return _internal_room_size();
}
inline void RoomList::clear_room() {
  _impl_.room_.Clear();
}
inline ::Room* RoomList::mutable_room(int index) {
  // @@protoc_insertion_point(field_mutable:RoomList.room)
  return _impl_.room_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Room >*
RoomList::mutable_room() {
  // @@protoc_insertion_point(field_mutable_list:RoomList.room)
  return &_impl_.room_;
}
inline const ::Room& RoomList::_internal_room(int index) const {
  return _impl_.room_.Get(index);
}
inline const ::Room& RoomList::room(int index) const {
  // @@protoc_insertion_point(field_get:RoomList.room)
  return _internal_room(index);
}
inline ::Room* RoomList::_internal_add_room() {
  return _impl_.room_.Add();
}
inline ::Room* RoomList::add_room() {
  ::Room* _add = _internal_add_room();
  // @@protoc_insertion_point(field_add:RoomList.room)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Room >&
RoomList::room() const {
  // @@protoc_insertion_point(field_list:RoomList.room)
  return _impl_.room_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_match_2eproto
